#!/usr/bin/env perl
#
# Applies XPath expressions to files or URLs.

use 5.16.0;
use warnings;
use File::Temp qw(tempfile);
use Getopt::Long qw(GetOptions);
use LWP::UserAgent ();
use URI;
use XML::LibXML               ();
use XML::LibXML::XPathContext ();

GetOptions(
    'encoding|E=s'     => \my $Flag_Output_Encoding,
    'help|h|?'         => \&emit_help,
    'namespace|ns|n=s' => \my @Der_Namespacen,
    'parse|p=s'        => \my $Flag_Parse_Method,
    'subquery|S=s'     => \my $Flag_Subquery,
    'timeout|t=i'      => \my $Flag_Timeout,
) or exit 65;

emit_help() if @ARGV < 2;

if ($Flag_Output_Encoding) {
    if ( $Flag_Output_Encoding !~ m/^:/ ) {
        $Flag_Output_Encoding = ':encoding(' . $Flag_Output_Encoding . ')';
    }
    binmode *STDOUT, $Flag_Output_Encoding;
}
$Flag_Parse_Method //= 'XML';
my %Parse_Method = (
    XML  => 'parse_file',
    HTML => 'parse_html_file',
    SGML => 'parse_sgml_file',
);
$Flag_Timeout //= 30;

my $query = shift;

for my $document (@ARGV) {
    # the otherwise unused $fh is to keep the (possible) temporary file
    # in scope so that it is not unlinked early
    my ( $fh, $file ) = get_file( URI->new($document), $document );
    my $xpath = parse_xml( $file, $document );
    my $nodelist = $xpath->find($query);

    for my $node ( $nodelist->get_nodelist ) {
        if ($Flag_Subquery) {
            my $subnodelist = $xpath->find( $Flag_Subquery, $node );
            for my $subnode ( $subnodelist->get_nodelist ) {
                say $subnode->toString;
            }
        } else {
            say $node->toString;
        }
    }
}

sub emit_help {
    warn <<"END_USAGE";
Usage: xpquery [options] xpath-query file-or-url [file-or-url2 ..]

Apply XPath expressions to files or URLs. Options include:

  -E encoding  Output encoding.
  -n ns        Register a custom namespace.
  -p method    Parse using method XML, HTML, SGML. Default is XML.
  -S subquery  Subquery to search for at each node found by the query.
  -t timeout   Timeout for LWP::UserAgent requests.

END_USAGE
    exit 64;
}

sub get_file {
    my ( $location, $document ) = @_;
    my ( $fh, $file );
    if ( $location->scheme ) {
        ( $fh, $file ) = tempfile( "xpquery.XXXXXXXXXX", TMPDIR => 1, UNLINK => 1 );
        my $ua = make_agent();
        my $response = $ua->get( $location->canonical, ':content_file' => $file );
        die "xpquery: could not get '$document': " . $response->status_line . "\n"
          if !$response->is_success;
    } else {
        $file = $location->canonical;
    }
    return $fh, $file;
}

sub make_agent {
    my $ua = LWP::UserAgent->new(
        env_proxy  => 1,
        keep_alive => 0,
        timeout    => $Flag_Timeout
    );
    $ua->agent( $ENV{http_agent} ) if exists $ENV{http_agent};
    return $ua;
}

sub parse_xml {
    my ( $file, $document ) = @_;
    my $parser = XML::LibXML->new;

    # try to allow for crummy *ML documents TODO make these command
    # line options? (probably not, as this TODO has been here for at
    # least a decade)
    $parser->recover(2);
    $parser->load_ext_dtd(0);
    $parser->expand_entities(0);
    $parser->complete_attributes(0);
    #$parser->pedantic_parser(0);

    my $method = $Parse_Method{ uc $Flag_Parse_Method };
    die "xpquery: unknown parse method '$Flag_Parse_Method'\n" if !defined $method;

    my $doc;
    eval { $doc = $parser->$method($file) };
    die "xpquery: could not parse '$document' with '$Flag_Parse_Method': $@\n"
      if $@;

    my $xc = XML::LibXML::XPathContext->new($doc);
    set_namespace($xc);
    return $xc;
}

sub set_namespace {
    my ($xc) = @_;
    state @ns;
    if ( !@ns ) {
        for my $string (@Der_Namespacen) {
            for ( split ' ', $string ) {
                push @ns, [ split ':', $_, 2 ];
            }
        }
    } else {
        $xc->registerNs(@$_) for @ns;
    }
}
