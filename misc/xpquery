#!/usr/bin/env perl
#
# Applies XPath expressions to XML documents.

use strict;
use warnings;

use File::Temp ();
use Getopt::Std;
use LWP::UserAgent ();
use URI;
use XML::LibXML               ();
use XML::LibXML::XPathContext ();

my %opts;
getopts 'h?p:n:', \%opts;
help() if exists $opts{h} or exists $opts{'?'};

$opts{p} = 'XML' unless exists $opts{p};

my $query = shift || help();
help() unless @ARGV;

for my $document (@ARGV) {
  my $target = URI->new($document);
  my $file;

  # get document into filehandle
  # TODO URL lookup needs more error checking
  if ( $target->scheme ) {
    $file =
      ( File::Temp::tempfile( "xpquery.XXXXXXXXXX", DIR => File::Spec->tmpdir, ) )
      [1];

    my $ua =
      LWP::UserAgent->new( env_proxy => 1, keep_alive => 0, timeout => 30 );
    $ua->agent( $ENV{http_agent} ) if exists $ENV{http_agent};
    my $response = $ua->get( $target->canonical, ':content_file' => $file );
  } else {
    $file = $target->canonical;
  }

  my $parser = XML::LibXML->new;

  # try to allow for crummy *ML documents TODO make these command line
  # arguments?
  $parser->recover(2);
  $parser->load_ext_dtd(0);
  $parser->expand_entities(0);
  $parser->complete_attributes(0);
  #$parser->pedantic_parser(0);

  my $doc;
  eval {
    my %parse_method = (
      XML  => 'parse_file',
      HTML => 'parse_html_file',
      SGML => 'parse_sgml_file',
    );

    my $method = $parse_method{ uc $opts{p} } || 'parse_file';
    $doc = $parser->$method($file);
  };
  if ($@) {
    die "error: could not parse $document: $@\n";
  }

  # search resulting tree with XPath
  my $xc = XML::LibXML::XPathContext->new($doc);
  if ( exists $opts{'n'} ) {
    for my $spec ( split ' ', $opts{'n'} ) {
      $xc->registerNs( split ':', $spec, 2 );
    }
  }

  my $nodelist = $xc->find($query);
  my $gotref   = ref $nodelist;
  if ( $gotref ne 'XML::LibXML::NodeList' ) {
    die "error: expected XML::LibXML::NodeList but got $gotref instead??\n";
  }
  for my $node ( $nodelist->get_nodelist ) {
    print $node->toString, "\n";
  }
}

########################################################################
#
# SUBROUTINES

sub help {
  warn <<"HELP";
Usage: $0 [opts] xpath-query document1 [doc2 ..]

Apply XPath expressions to the specified XML files or URLs specified.

Options:
  -h/-?  Display this message

  -p xx  Parse using method xx (XML, HTML, SGML). Default is XML.
  -n xx  Custom namespace to register "prefix:uri p2:u2 ..."

HELP
  exit 64;
}

END {
  # Report problems when writing to stdout (perldoc perlopentut)
  unless ( close(STDOUT) ) {
    warn "error: problem closing STDOUT: $!\n";
    exit 74;
  }
}

__DATA__

=head1 NAME

xpquery - apply XPath queries to XML data.

=head1 SYNOPSIS

Return the C<intro> section of a DocBook XML article:

  $ xpquery '/article/section[@id="intro"]' operations-manual.xml

For more information on XPath, see:

http://www.w3.org/TR/xpath

=head1 DESCRIPTION

=head2 Overview

The C<xpquery> script allows quick application of XPath expressions
to XML data.

=head2 Normal Usage

  $ xpquery [options] xpath-expression files|URLs...

See L<"OPTIONS"> for details on the command line switches supported.

Quote the XPath expression to prevent unwanted shell interpolation of it.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=item B<-p> I<method>

Parse using the specified method: C<XML> (default), C<HTML>, or C<SGML>. 

=item B<-n> I<namespace prefix and uri>

Provide custom namespace to prefix mapping. Accepts a list of space
separated prefix:uri pairs, for example:

  -n 'a:http://example.org/foo b:http://example.org/bar'

Which can then be referenced in the XPath expression:

  xpquery -n a:http://example.org/foo //a:fooelement foo.xml

=back

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://github.com/thrig/sial.org-scripts/tree/master

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known issues.

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

thrig - Jeremy Mates (cpan:JMATES) C<< <jmates at cpan.org> >>

=head1 COPYRIGHT

Copyright (c) 2015 Jeremy Mates

     Permission to use, copy, modify, and/or distribute this software for
     any purpose with or without fee is hereby granted, provided that the
     above copyright notice and this permission notice appear in all
     copies.

     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
     OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
     PERFORMANCE OF THIS SOFTWARE.

=cut
