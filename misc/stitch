#!/usr/bin/env perl
#
# Stitches input files together, something like join(1) except selecting
# particular columns (all by default) and joining by line number. May or
# may not be faster than using paste(1) and then doing something with
# those joined columns, elsewhere.

use 5.14.0;
use warnings;
use Getopt::Long qw(GetOptions);

GetOptions(
    'autocol|ac' => \my $Flag_AutoCol,
    'help|h|?'   => \&emit_help,
    'ifs=s'      => \my $Flag_IFS,
    'ofs=s'      => \my $Flag_OFS,
    'rs=s'       => \my $Flag_RS,
) or exit 65;

emit_help() if !@ARGV;

$Flag_IFS //= ' ';
$Flag_OFS //= ' ';
$Flag_RS  //= '\n';

$Flag_IFS =~ s/(\\t)/qq!"$1"!/eeg;
$Flag_OFS =~ s/(\\[nrt])/qq!"$1"!/eeg;
$Flag_RS =~ s/(\\[nrt])/qq!"$1"!/eeg;

my @fhs;
my $seen_stdin = 0;

for my $arg (@ARGV) {
    # "file" (no spec) or "file:" (no spec but colon) or "file:spec"
    # where no spec means "print all columns and do not preserve column
    # positions as will not try to guess that"
    my ( $file, $spec );
    if ( $arg =~ m/^([^:]+)$/ ) {
        $file = $1;
    } elsif ( $arg =~ m/^(.+):([^:]*)$/ ) {
        $file = $1;
        $spec = $2;
    }
    die "could not parse file from '$arg'\n" if !defined $file;

    my $fh;
    if ( $file eq '-' and !$seen_stdin ) {
        $fh         = \*STDIN;
        $seen_stdin = 1;
    } else {
        open $fh, '<', $file or die "could not open '$file': $!\n";
    }
    push @fhs, [ $fh, defined $spec ? specify($spec) : undef ];
}

my $have_fhs = @fhs;

while ($have_fhs) {
    my $pad_col = 0;
    for my $i ( 0 .. $#fhs ) {
        if ( defined $fhs[$i]->[0] ) {
            my $line = readline $fhs[$i]->[0];
            if ( !defined $line ) {
                # EOF on an input file
                $fhs[$i]->[0] = undef;
                $have_fhs--;
                $pad_col += @{ $fhs[$i]->[1] } if defined $fhs[$i]->[1];
                next;
            }

            # Complicated due to not wanting to print the empty columns
            # if there's nothing else on the line to print (works
            # around getting an ultimate blank line that messes up the
            # shell prompt)
            if ($pad_col) {
                print( ($Flag_OFS) x $pad_col );
                $pad_col = 0;
            }

            chomp $line;
            my @fields = split /$Flag_IFS/, $line;

            # Set field count from the first line of input (may cause
            # subsequent uninit warnings if the number of columns
            # then drops)
            if ( $Flag_AutoCol and !defined $fhs[$i]->[1] ) {
                $fhs[$i]->[1] = [ 0 .. $#fields ];
            }

            if ( defined $fhs[$i]->[1] ) {
                print join( $Flag_OFS, @fields[ @{ $fhs[$i]->[1] } ] );
            } else {
                print join( $Flag_OFS, @fields );
            }
            print $Flag_OFS if $i != $#fhs;

        } elsif ( defined $fhs[$i]->[1] ) {
            $pad_col += @{ $fhs[$i]->[1] };
        }
    }
    print $Flag_RS if $have_fhs;
}

########################################################################
#
# SUBROUTINES

sub emit_help {
    warn <<"END_USAGE";
Usage: stitch [--ac] [--ifs=s] [--ofs=s] [--rs=s] file[:spec] [file[:spec] ..]

Joins columns from multiple input files.

  --autocol --ac    Guess number of columns from first line of file
  --ifs=s           Input field separator (" ")
  --ofs=s           Output field separator (" ")
  --rs=s            Output record separator ("\n")

The file must be a filename, or - for standard input (once). The
optional column specification must consist of columns to select
(numbers, commas, and .. for a range), and for stdin requires the
getopt(3) guard, e.g.

  ... | stitch -- -:1,2,5..9 foo:3

To select the first, second, and fifth through ninth columns of stdin
followed by the third column from the file 'foo'.

END_USAGE
    exit 64;
}

# Parse 1,2,3,5..9 type input into Perl array indices
sub specify {
    my $spec = shift;
    my @indices;

  SPEC: {
        if ( $spec =~ m/\G(\d+)\.\.(\d+),?/acg ) {
            push @indices, $1 .. $2;
            redo SPEC;
        }
        if ( $spec =~ m/\G(\d+),?/acg ) {
            push @indices, $1;
            redo SPEC;
        }
        if ( $spec =~ m/\G(.)/cg ) {
            warn "unknown character '$1' in spec '$spec'\n";
            exit 65;
        }
    }

    # Assume user will use awk- or cut-like column numbers from 1, shift
    # these to perl count-from-zero internally.
    $_-- for @indices;

    return \@indices;
}
