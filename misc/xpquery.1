.Dd May 20 2017
.Dt XPQUERY 1
.nh
.Os
.Sh NAME
.Nm xpquery
.Nd queries the given documents with XPath
.Sh SYNOPSIS
.Nm
.Bk -words
.Op Fl E Ar encoding
.Op Fl n Ar namespace 
.Op Fl p Ar method 
.Op Fl S Ar xpath-subquery
.Op Fl t Ar timeout
.Ar xpath-query
.Ar file-or-url ..
.Ek
.Sh DESCRIPTION
.Nm
applies the given
.Ar xpath-query
to the given files or URL. Subqueries allow a secondary lookup from
each node found by that first search. The nodes found are printed to
standard out.
.Pp
Note that the XPath documentation and examples must be studied in
detail for
.Nm
to be of any use.
.Pp
Options:
.Bl -tag -width Ds
.It Cm --encoding= Ns Ar encoding Op Fl E Ar enc
Encoding for standard output;
.Qq encodings
that begin with a colon (such as
.Cm :raw )
will be used directly, while those that do not (such as
.Cm UTF-8 )
will be rewritten as
.Cm :encoding(UTF-8) .
Without this set one may see
.Qq Wide character in say
warnings. A sensible default on a modern unix system may be
.Pp
.Dl $ Ic xpquery -E UTF-8 ...
.It Cm --namespace= Ns Ar namespace Op Cm --ns Ar ns | Fl n Ar ns
Registers a custom XML namespace with the parser. Namespaces may be
space separated, or this option may be specified multiple times. These
can be extremely awkward to use; see the examples, below.
.It Cm --parse= Ns Ar method Op Fl p Ar meth
Parse method. One of
.Ar html ,
.Ar sgml ,
or the default
.Ar xml .
.It Cm --subquery= Ns Ar xpath-subquery Op Fl S Ar xp-sub
XPath subquery to apply at each node found by the global
.Ar xpath-query .
.It Cm --timeout= Ns Ar seconds Op Fl t Ar secs
Timeout for the HTTP agent, 30 seconds by default.
.El
.Sh ENVIRONMENT
.Bl -tag -width Ds
.It Cm http_agent
Sets a custom
.Qq User-Agent
header for HTTP requests.
.It Cm *_proxy
If set, various proxy settings will be taken from the appropriate
environment variables such as
.Cm http_proxy
and
.Cm no_proxy .
This is done via the
.Cm env_proxy
method of
.Xr LWP::UserAgent 3pm .
.El
.Sh EXIT STATUS
.Ex -std
.Sh EXAMPLES
A simple HTML example
.Pp
.Dl $ Ic xpquery -p HTML '//title' http://www.w3.org
.Pp
Given the following in the file
.Pa test.xml
.Pp
.Dl <xip>
.Dl <zop><zoot>cat</zoot></zop>
.Dl <zop><zoot>dog</zoot></zop>
.Dl <zop><zoot>fish</zoot></zop>
.Dl </xip>
.Pp
The animals may be queried for directly
.Pp
.Dl $ Ic xpquery '//zop/*/text()' test.xml
.Pp
Or queried for via a subquery
.Pp
.Dl $ Ic xpquery -S 'text()' '//zoot' test.xml
.Pp
Subqueries will be increasingly necessary where the document structure
is complicated, and expressing what is desired in a single query turns
out to lie somewhere between impossible and far too lengthy to debug.
.Pp
Namespaces likewise complicate matters
.Pp
.Dl <doc xmlns:xlink="http://www.w3.org/1999/xlink">
.Dl <foo xlink:href="http://example.org">bar</foo>
.Dl </doc>
.Pp
which requires something like
.Pp
.Dl $ Ic xpquery -n 'xlink:http://www.w3.org/1999/xlink' \e
.Dl \& \& Ic '//foo/@xlink:href' ...
.Pp
to query. It may be beneficial to hide standard namespace registrations
in a shell alias or function definition.
.Pp
Namespaces can be made even more difficult by not having a name
.Pp
.Dl $ Ic cat hardns.xml 
.Dl <foo><bar xmlns="http://example.org/">cat</bar></foo>
.Dl $
.Pp
these either require first editing the XML to list a name
.Pp
.Dl $ Ic cat hardns.xml 
.Dl <foo><bar xmlns:grr="http://example.org/">cat</bar></foo>
.Dl $ Ic xpquery -n 'grr:http://example.org/' '//bar/text()' hardns.xml 
.Dl cat
.Dl $
.Pp
or to select, awkwardly, on
.Cm local-name
for each otherwise invisible namespace:
.Pp
.Dl $ Ic cat hardns.xml 
.Dl <foo><bar xmlns="http://example.org/">cat</bar></foo>
.Dl $ Ic xpquery '//*[local-name()="bar"]/text()' hardns.xml 
.Dl cat
.Dl $
.Pp
As to why such complexity was designed into the system, who knows?
.Sh SEE ALSO
http://www.w3.org/TR/xpath
.Pp
Alternatives include
.Pp
.Xr Mojo::DOM58 3pm ,
.Xr XML::Twig 3pm
.Sh AUTHOR
.An Jeremy Mates
