#!/usr/bin/env perl
#
# cfu - compiles and (maybe) runs C code

use 5.16.0;
use warnings;
use File::Spec ();
use File::Temp qw(tempdir);
use Getopt::Long qw(GetOptions);
use Text::ParseWords qw(shellwords);

# TODO --debug should also be -g but that was already taken by --global
# so -g for --global has been removed until I forget that relation
GetOptions(
    'bits|b=i'     => \my $Flag_Bits,
    'debug|d:s'    => \my $Flag_Debug,
    'eargs|E=s'    => \my $Flag_ExecArgs,
    'fakename|F=s' => \my $Flag_Fake_Name,
    'globals|G=s'  => \my @globals,
    'help|h|?'     => \&emit_help,
    'S'            => \my $Flag_Compile_Only,
    'show-code|l'  => \my $Flag_Show_Code,
) or exit 65;

emit_help() if !@ARGV;

my $CC = exists $ENV{'CC'} ? $ENV{'CC'} : 'cc';
my @CFLAGS = shellwords(
    exists $ENV{'CFLAGS'}
    ? $ENV{'CFLAGS'}
    : '-O2 -std=c99 -Wall -pedantic -fno-diagnostics-color -pipe -lm'
);

if ($Flag_Bits) {
    if ( $Flag_Bits == 32 or $Flag_Bits == 64 ) {
        push @CFLAGS, "-m$Flag_Bits";
    } else {
        die "unknown bit count '$Flag_Bits'\n";
    }
}

my @debug_cmd = ('gdb');
if ( $Flag_Debug and length $Flag_Debug ) {
    @debug_cmd = shellwords($Flag_Debug);
}

for my $statement (@globals) {
    $statement .= "\n" unless $statement =~ m/\n$/;
}

chomp( @ARGV = readline *STDIN ) if @ARGV == 1 and $ARGV[0] eq '-';

$ARGV[-1] =~ s/$/;/ unless $ARGV[-1] =~ m/;\s*$/;
for my $statement (@ARGV) {
    $statement = "\t" . $statement;
    $statement .= "\n" unless $statement =~ m/\s$/;
}

my $c_template = <<"END_TMPL";
#ifdef __linux__
#define _BSD_SOURCE
#define _GNU_SOURCE
#include <linux/limits.h>
#include <getopt.h>
#else
#include <sys/syslimits.h>
#endif

#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/ip6.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <arpa/inet.h>

#include <sys/time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/stat.h>

#include <complex.h>
#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <float.h>
#include <fts.h>
#include <grp.h>
#include <libgen.h>
#include <limits.h>
#include <math.h>
#include <pwd.h>
#include <signal.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sysexits.h>
#include <syslog.h>
#include <termios.h>
#include <time.h>
#include <unistd.h>

@globals

int main(int argc, char *argv[]) {
@ARGV
\treturn 0;
}
END_TMPL

if ($Flag_Show_Code) {
    print $c_template;
    exit;
}

my $work_dir  = getworkdir();
my $exe_name  = defined $Flag_Fake_Name ? $Flag_Fake_Name : 'cfu';
my $code_file = File::Spec->catfile( $work_dir, $exe_name . '.c' );

open my $cfh, '>', $code_file or die "could not write '$code_file': $!\n";
print $cfh $c_template;
$cfh->flush;
close($cfh);

push @CFLAGS, '-g' if $Flag_Debug;

if ($Flag_Compile_Only) {
    push @CFLAGS, qw(-S -o -);
    exec( $CC, @CFLAGS, $code_file )
      or die "cfu: could not exec '$CC': $!\n";
}

my $exe_file = File::Spec->catfile( $work_dir, $exe_name );

if ( system( $CC, @CFLAGS, '-o', $exe_file, $code_file ) != 0 ) {
    die "cfu: could not exec '$CC': $?\n" if $? == -1;
    die "cfu: could not compile '$code_file': $?\n";
}

if ($Flag_Debug) {
    chdir $work_dir or die "could not cd to '$work_dir': $!\n";
    exec( @debug_cmd, './' . $exe_name )
      or die "cfu: could not exec '@debug_cmd': $!\n";
} else {
    exec( {$exe_file} ( $exe_name, shellwords($Flag_ExecArgs) ) )
      or die "cfu: could not exec '$exe_file': $!\n";
}

sub emit_help {
    warn <<"END_USAGE";
cfu - compiles and (maybe) runs C code

Usage:
  cfu [options] c-statements|-

Options:
  -d [debugger]  Execs the compiled code under gdb (or given debugger)
  -E exeargs     Arguments to give to the executable (but not to gdb)
  -F name        Sets application name to this instead of 'cfu'
  -G globals     Global statements (declarations, functions, ...)
  -l             Show only the C code, then exit
  -S             Show the compiled code, then exit

END_USAGE
    exit 64;
}

# if all goes well this however will leave the dir behind on account of
# the exec used to forge the $exe_name and then the cleanup code can't
# ever run
sub getworkdir { tempdir( "cfu.XXXXXXXXXX", TMPDIR => 1, CLEANUP => 1 ) }
