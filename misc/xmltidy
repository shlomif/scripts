#!/usr/bin/env perl
#
# Cleans up XML via the xmllint utility from the libxml2 project.
# Handles input either from standard input, or named files given as
# arguments. Named files are currently operated on in-place, while
# standard input is passed to standard out after the tidy is done.

use 5.8.0;
use strict;
use warnings;

use open IO => ':utf8';

# command to tidy up XML; xmllint from libxml2 accepts the filename on
# the command line and produces output to standard out
my @xmltidy_cmd = qw(xmllint --nsclean --encode UTF-8 --format);

use File::AtomicWrite ();
use File::Basename qw(basename dirname);
use File::Temp qw(tempfile);

my $basename = basename $0;

use Getopt::Std;
my %opts;
getopts 'h?', \%opts || print_help();
print_help() if $opts{h} or $opts{'?'};

# to preserve any $! from the tidy command out of a function call
my $error;

# no args, read file from stdin, write to temp file, print results from
# xmltidy to stdout
unless (@ARGV) {
  my ( $fh, $tmpfile ) = tempfile();
  binmode( $fh, ':utf8' );
  print $fh $_ while readline *STDIN;

  my $tfh = xmltidy($tmpfile);
  unless ($tfh) {
    remark( 'error', 'xmllint failed', { errno => $error } );
    exit 101;
  }
  print while <$tfh>;

  # Report problems when writing to stdout (perldoc perlopentut)
  # TODO this results in a "Bad file descriptor" error
  #unless ( close(STDOUT) ) {
  # die "error: problem closing STDOUT: $!\n";
  #}

} else {
  for my $file (@ARGV) {
    next unless -f $file;

    my ($filemode) = ( stat _ )[2] & 07777;

    my $tfh = xmltidy($file);
    unless ($tfh) {
      remark( 'error', 'xmllint failed', { errno => $error, file => $file } );
      exit 101;
    }

    # read document to scalar as otherwise while() loop over $tfh has
    # issues when writing to temporary file... buffering problems?
    my $string = do { local $/ = undef; <$tfh> };
    if ( length $string == 0 ) {
      remark( 'error', 'no data from xmllint', { file => $file } );
      exit 102;
    }
    chomp($string);
    $string .= "\n";

    eval {
      File::AtomicWrite->write_file(
        { file          => $file,
          input         => \$string,
          mode          => $filemode,
          binmode_layer => ':utf8'
        }
      );
    };
    if ($@) {
      chomp $@;
      remark(
        'error',
        'problem writing temporary file',
        { errstr => $@, file => $file }
      );
      exit 103;
    }
  }
}

# accepts filename to tidy up, returns filehandle to play with
sub xmltidy {
  my $tmpfile = shift;

  undef $error;

  open my $tidyfh,        "-|"
    or exec @xmltidy_cmd, $tmpfile
    or $error = $!;

  return $tidyfh;
}

sub print_help {
  warn <<"HELP";
Usage: $basename [file [file ...]]

Cleans up XML via the xmllint utility from the libxml2 project.

Options:
  -h/-?  Display this message.

Run perldoc(1) on this script for additional documentation.

HELP
  exit 64;
}

sub remark {
  my $priority   = shift;
  my $message    = shift;
  my $attributes = shift;

  chomp $message;

  my $attr_str;
  if ($attributes) {
    $attr_str = join ', ',
      map { $attributes->{$_} ||= q{}; "$_=$attributes->{$_}" }
      sort keys %$attributes;
  }

  warn "$priority: $message", ( $attr_str ? ": $attr_str" : q{} ), "\n";
  return 1;
}

END {
  # catch disk full problems during command line redirection according
  # to perlopentut
  close STDOUT
    or remark( 'error', 'could not close STDOUT', { errno => $! } )
    and exit 104;
}

__END__

=head1 NAME

xmltidy - cleans up XML via the xmllint utility from the libxml2 project

=head1 SYNOPSIS

Tidy up input data, print output to standard out:

  $ xmltidy < input.xml

Clean up named files in place:

  $ xmltidy first.xml second.xml

=head1 DESCRIPTION

=head2 Overview

Wrapper for the C<xmllint> utility from the libxml2 project to allow
cleanup on data from standard input and also tidy multiple files in
place.

=head2 Normal Usage

  $ xmltidy [file [file ...]]

See L<"OPTIONS"> for details on the command line switches supported.

If no filenames are supplied as arguments, the script will wait for
input on the standard input filehandle, and tidy that data, then print
the results to standard out. Otherwise, files named as arguments will be
cleaned up using in place editing on the files.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=back

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://github.com/thrig/scripts/tree/master

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known issues.

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

thrig - Jeremy Mates (cpan:JMATES) C<< <jmates at cpan.org> >>

=head1 COPYRIGHT

Copyright (c) 2015 Jeremy Mates

     Permission to use, copy, modify, and/or distribute this software for
     any purpose with or without fee is hereby granted, provided that the
     above copyright notice and this permission notice appear in all
     copies.

     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
     OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
     PERFORMANCE OF THIS SOFTWARE.

=cut
