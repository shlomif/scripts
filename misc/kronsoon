#!/usr/bin/env perl
#
# Generate crontab(5) compatible time specification for a command to run
# in the near future. The at(1) system would also make sense for "near
# future" jobs, except where jobs must run from cron to replicate
# environment and other settings set there. Run perldoc(1) on this
# script for additional documentation.

use strict;
use warnings;

use Getopt::Long qw(GetOptions);
use POSIX qw(strftime);

# This format will only run the job once on the current day, and again
# in subsequent years. Should be plenty of time to remove a test run.
# NOTE one of the day-of-month or day-of-week should be *, as otherwise
# crond treats them as a logical OR (see crontab(5) for details).
my $CRON_TIME_FORMAT = '%M %H %d %m *';

# Set high, due to interrupt driven nature of my job...
my $SECONDS_IN_ADVANCE = 99;

END {
  # Report problems when writing to stdout (perldoc perlopentut)
  unless ( close(STDOUT) ) {
    warn "error: problem closing STDOUT: $!\n";
    exit 74;
  }
}

my ( $use_gmtime, $comment, $time_format, $pad_time );
GetOptions(
  'help|?|h'    => \&print_help,
  'comment|c=s' => \$comment,
  'format|f=s'  => \$time_format,
  'gmtime|g'    => \$use_gmtime,
  'lead|l=s'    => \$pad_time,
);

if ( defined $pad_time ) {
  $SECONDS_IN_ADVANCE = duration2seconds($pad_time);
  if ( !defined $SECONDS_IN_ADVANCE or $SECONDS_IN_ADVANCE !~ m/^\d+$/ ) {
    die "error: invalid lead time: $pad_time\n";
  }
}

if ( defined $time_format ) {
  $CRON_TIME_FORMAT = $time_format;
}

# Read optional command to insert after cron time specification either
# from command line, or if standard input is not a terminal, assume
# being piped something (e.g. ":.!kronsoon" in vi).
my $command;
if (@ARGV) {
  $command = @ARGV ? "@ARGV" : '';
} elsif ( !-t ) {
  $command = do { local $/; readline *STDIN };
  chomp($command);
}

my $current_epoch = time();

# Add remainder seconds to advance time if "late" in the current minute
my $run_epoch =
  $current_epoch + $SECONDS_IN_ADVANCE + ( $current_epoch % 60 );

my @run_time = $use_gmtime ? gmtime($run_epoch) : localtime($run_epoch);

if ( defined $comment and length $comment > 0 ) {
  print "# $comment\n";
}
print strftime( $CRON_TIME_FORMAT, @run_time )
  . ( defined $command ? " $command" : '' ) . "\n";

exit 0;

# takes duration such as "2m3s" and returns number of seconds.
sub duration2seconds {
  my $tmpdur = shift;
  my $lead_seconds;

  # how to convert short human durations into seconds
  my %factor = (
    'w' => 604800,
    'd' => 86400,
    'h' => 3600,
    'm' => 60,
    's' => 1,
  );

  # assume raw seconds for plain number
  if ( $tmpdur =~ m/^\d+$/ ) {
    $lead_seconds = $tmpdur;

  } elsif ( $tmpdur =~ m/^[wdhms\d\s]+$/ ) {

    # match "2m 5s" style input and convert to seconds
    while ( $tmpdur =~ m/(\d+)\s*([wdhms])/g ) {
      $lead_seconds += $1 * $factor{$2};
    }
  }

  return $lead_seconds;
}

sub print_help {
  warn <<"END_HELP";
Usage: $0 [options] [cron command]

Generate cron timestamp for single run in the near future.

Options:

  --help, -h, -?   Generate this help message.

  --comment "rem"  Specify a comment to precede cron command with.
  --format  "ftm"  Custom strftime(3) format for cron timestamp.
  --lead    "sec"  Specify a custom lead time.
  --gmtime, -g     Use gmtime() instead of default localtime().
  
END_HELP

  exit 64;
}

=head1 NAME

kronsoon - generate crontab(5) run in near future

=head1 SYNOPSIS

  $ kronsoon echo test
  53 19 25 04 * echo test

=head1 DESCRIPTION

=head2 Overview

Generate crontab(5) compatible time specification for a command to run
in the near future. The at(1) system would also make sense for "near
future" jobs, except where jobs must run from cron to replicate
environment and other settings set there.

=head2 Normal Usage

  $ kronsoon [options] [command args ..]

If nothing is listed as a command, no crontab command will follow the
crontab(5) compatible time specification. If no command is listed, and
standard input is not a terminal, kronsoon will read the command from
standard input. This makes kronsoon compatible with vi(1) filters:

  :.!kronsoon

See L<"OPTIONS"> for details on the command line switches supported.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<--help>, B<-h>, B<-?>

Prints a brief usage note about the script.

=item B<--comment>=I<comment string>, B<-c>

Specifies a comment that will precede the crontab entry.

  $ kronsoon -c "comment" date
  # comment
  58 19 25 04 * date

=item B<--format>=I<strftime format>, B<-f>

Use a custom strftime(3) format instead of the default.

=item B<--gmtime>, B<-g>

Use gmtime instead of the default localtime call.

=item B<--lead>=I<lead time>, B<-l>

Custom lead time instead of the default. Can be in seconds, or a
shorthand notation:

  $ date -u
  Sat Apr 25 20:13:36 GMT 2009
  $ kronsoon -g -l 600
  24 20 25 04 *
  $ kronsoon -g -l 10m
  24 20 25 04 *

=back

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://github.com/thrig/scripts/tree/master

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known issues.

=head1 SEE ALSO

perl(1), crontab(5)

=head1 AUTHOR

thrig - Jeremy Mates (cpan:JMATES) C<< <jmates at cpan.org> >>

=head1 COPYRIGHT

Copyright (c) 2015 Jeremy Mates

     Permission to use, copy, modify, and/or distribute this software for
     any purpose with or without fee is hereby granted, provided that the
     above copyright notice and this permission notice appear in all
     copies.

     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
     OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
     PERFORMANCE OF THIS SOFTWARE.

=cut
