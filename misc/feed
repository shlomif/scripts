#!/usr/bin/env expect
#
# feed - copies data from the input file (or stdin) to the subsequent
# REPL-based program and then turns interaction with that program over
# to the user

if {[llength $argv] < 2} {
    puts stderr "Usage: feed file|- command \[args ..]"
    exit 64
}

package require Tcl 8.5
# `doas pkg_add tcllib` or equivalent
package require fileutil
# https://github.com/thrig/tcl-pledge
package require pledge
pledge {cpath exec proc rpath stdio tty wpath unix unveil} NULL

# somewhat high timeout to help spot bad interactions with a REPL
set timeout 3

set argv [lassign $argv input_file]

proc warn {msg} { puts stderr "feed: $msg" }
proc die  {msg} { warn $msg; stty echo; exit 1 }

if {$input_file eq "-"} {
    # copy stdin into a tmp file and then hopefully restore access to
    # the tty by closing stdin
    set tmpfile [::fileutil::tempfile "feed-"]
    unveil $tmpfile crw
    trap {file delete $tmpfile; puts ""; stty echo; exit 1} \
      {SIGHUP SIGINT SIGPIPE SIGTERM}
    if {[catch {set tmpfh [open $tmpfile w]} err]} {
        file delete $tmpfile; die $err
    }
    fconfigure $tmpfh -encoding binary -translation binary
    while {1} {
        set tmpbuf [read stdin 1024]
        if {$tmpbuf eq ""} { break }
        puts -nonewline $tmpfh $tmpbuf
    }
    if {[catch {close $tmpfh} err]} {
        file delete $tmpfile; die $err
    }
    close stdin
    open /dev/tty r+
    if {[catch {set input_fh [open $tmpfile r]} err]} {
        file delete $tmpfile; die $err
    }
} else {
    # regular file input, no "| program" shenanigans (see open(n))
    set input_file [string trimleft $input_file "| "]
    if {[catch {set input_fh [open $input_file r]} err]} { die $err }
    fconfigure $input_fh -encoding binary -translation binary
    set tmpfile ""
}

unveil / rx
unveil /dev rw
unveil

# avoid doubled lines
stty -echo

if {[catch {spawn -noecho {*}$argv} err]} {
    if {$tmpfile ne ""} { file delete $tmpfile }
    die $err
}

# control+z will background feed (and whatever being run) while for
# control+c that is passed through to the program being run;
# control+\ remains a good way to abort when things go really awry
set CONTROL_C \003
set CONTROL_Z \032
trap {
    if {$tmpfile ne ""} { file delete $tmpfile }
    puts ""
    stty echo
    exit 1
} {SIGHUP SIGPIPE SIGTERM}
#trap SIG_IGN SIGINT
trap {send $CONTROL_C} SIGINT

proc interactionby {} {
    global CONTROL_C CONTROL_Z input_fh tmpfile
    stty echo
    if {$tmpfile ne ""} { file delete $tmpfile }
    if {[catch {close $input_fh} err]} { die $err }
    interact {
        $CONTROL_C {send -raw $CONTROL_C}
        -reset $CONTROL_Z {exec kill -STOP [pid]}
    }
}

# and here we try to figure out hopefully a 90% solution for feeding of
# varied inputs to varied REPL
set command [lindex $argv 0]

# ... except that buck now gets passed to the user to write (there's an
# example in my dotfiles repo)
set feedrc [lindex [array get env FEEDRC] end]
if {$feedrc eq ""} { set feedrc $env(HOME)/.feedrc }
catch {source $feedrc} cresult coptions

# ... unless they screw that part up
if {[dict get $coptions -code] != 0} {
    warn [dict get $coptions -errorinfo]
    die "feed: could not source $feedrc"
}

if {[info commands await_prompt] eq ""} {
    # no-op so bad for things that first spin up and flush input from
    # before that point
    proc await_prompt {} {}
}

if {[info commands consume] eq ""} {
    # probably adequate for shell scripts or similar line-based things;
    # may need trailing \ handling for continuation lines if there's a
    # long wait for a ptompt setup
    proc consume {fh} {
        global buf
        while {[gets $fh line] >= 0} {
            if {[regexp {^[[:blank:]]*(?:#|$)} $line]} { continue }
            if {[string length $buf]} { send -- "$buf\r" }
            set buf $line
            return 1
        }
        return 0
    }
}

set buf {}
set bail 0
while {[consume $input_fh]} {
    if {$bail} { break }
    await_prompt
}
if {[string length $buf] && !$bail} { send -- "$buf\r" }

interactionby
