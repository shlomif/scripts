#!/usr/bin/env perl
#
# Humanize file sizes in input, like the new -h option to various Unix
# commands. (-h being new may help date when this code was written.)

use strict;
use warnings;
use Getopt::Long qw(GetOptions);

my $base = 1 << 10;

Getopt::Long::Configure("bundling");
GetOptions(
    'base|b=i' => \$base,
    'k'        => sub { $base = 1 << 10 },
    'M'        => sub { $base = 1 << 20 },
    'G'        => sub { $base = 1 << 30 },
    'T'        => sub { $base = 1 << 40 },
    'P'        => sub { $base = 1 << 50 },
    'help|h|?' => \&emit_help,
    'n=i'      => \my $num_digits,
    'right|r'  => \my $Flag_Right,
) or exit 65;

die "humanize: base must be a positive integer\n" if $base < 1;

$num_digits = 4 if !defined $num_digits or $num_digits < 1;

shift @ARGV if @ARGV == 1 and $ARGV[0] eq '-';

while (readline) {
    while (m/(-?[0-9]{$num_digits,})/g) {
        my $number     = $1;
        my $human      = humanize( $number, { base => $base } );
        my $pad_length = length($number) - length($human);
        my $pad        = $pad_length > 0 ? ' ' x $pad_length : '';
        $human = $Flag_Right ? $pad . $human : $human . $pad;
        s//$human/;
    }
    print;
}

sub emit_help {
    print <<"END_USAGE";
Usage: humanize [options] [files|-]

Humanizes numbers.

  -b nn            Custom base, e.g. 512 or 4096 or whatever.
  -k -M -G -T -P   Base is in kilobytes, megabytes, gig, etc.
                   Default is kilobytes (e.g. df -k | humanize -r)

  -n num  Require that numbers match this many digits (4 by default).
  -r      Align humanized numbers to the right instead of the left.

END_USAGE
    exit 64;
}

# Inspired from GNU's df -h output, which fixes 133456345 bytes to be
# something human readable.
#
# Takes a number, returns formatted string. Optionally accepts hash
# reference containing non-standard defaults.
sub humanize {
    my $num   = shift;
    my $prefs = shift;

    return $num unless $num =~ m/^-?\d+$/;

    # various parameters that adjust how the humanization is done
    # these really should be able to be specified on the command line, or
    # read in from a prefs file somewhere, as nobody will agree as to what
    # "proper" human output should look like... :)
    my %defaults = (

        # base numbers are in (1 is bytes, 1024 for K)
        'base' => 1,

        # include decimals in output? (e.g. 25.8K vs. 26K)
        'decimal' => 1,

        # include .0 in decimal output?
        'decimal_zero' => 1,

        # what to divide file sizes down by
        # 1024 is generally "Kilobytes," while 1000 is
        # "kilobytes," technically
        'factor' => 1024,

        # percentage above which will be bumped up
        # (e.g. 999 bytes -> 1 K as within 5% of 1024)
        # set to undef to turn off
        'fudge' => 0.96,

        # lengths above which decimals will not be included
        # for better readability
        'max_human_length' => 2,

        # list of suffixes for human readable output
        'suffix' => [ 'B', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y' ],
    );

    # merge passed options with defaults
    for my $k ( keys %$prefs ) {
        if ( exists $defaults{$k} and defined $prefs->{$k} ) {
            $defaults{$k} = $prefs->{$k};
        }
    }

    my $count  = 0;
    my $prefix = q{};
    my $tmp    = q{};

    if ( $num < 0 ) {
        $num    = abs $num;
        $prefix = '-';
    }

    # adjust number to proper base
    $num *= $defaults{base};

    # reduce number to something readable by factor specified
    while ( $num > $defaults{factor} ) {
        $num /= $defaults{factor};
        $count++;
    }

    # optionally fudge "near" values up to next higher level
    if ( $defaults{fudge} ) {
        if ( $num > ( $defaults{fudge} * $defaults{factor} ) ) {
            $count++;
            $num /= $defaults{factor};
        }
    }

    # no .[1-9] decimal on longer numbers for easier reading; only show
    # decimal if format say so
    if ( length sprintf( "%.f", $num ) > $defaults{max_human_length}
        || !$defaults{decimal} ) {

        $tmp = sprintf( "%.0f", $num );

    } else {
        $tmp = sprintf( "%.1f", $num );
        $tmp =~ s/\.0$// unless $defaults{decimal_zero};
    }

    return $prefix . $tmp . $defaults{suffix}->[$count];
}
