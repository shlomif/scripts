.Dd January  6 2017
.Dt FEED 1
.nh
.Os
.Sh NAME
.Nm feed
.Nd feeds commands into a REPL
.Sh SYNOPSIS
.Nm
.Bk -words
.Ar file|-
.Ar command
.Op Ar args ..
.Ek
.Sh DESCRIPTION
.Nm
reads lines from the given
.Pa file
(or standard input) and feeds these lines to the subsequent
.Ar command ,
Once all the lines have been fed, the user will be able to
.Ic interact
with the REPL manually.
.Pp
Support for a REPL should ideally be written into
.Pa ~/.feedrc .
See the code for the default behavior.
.Pp
Input of
.Ic control+z
will cause
.Nm
(and the
.Ar command )
to stop. A
.Ic control+c
will be relayed from
.Nm
to the 
.Ar command .
.Sh ENVIRONMENT
The
.Ev FEEDRC
environment variable offers a means to customize the path to what by default
is the
.Pa ~/.feedrc
file.
.Sh FILES
The file
.Pa ~/.feedrc
must exist, and should contain TCL code that specifies a
.Cm dosomethingwith
proc that will be passed each line of the input in turn.
.Pa ~/.feedrc
will likely end up with a series of if/else statements along the lines
of:
.Pp
.Dl # "tocall" contains the command name (2nd argument to feed)
.Dl if {$tocall eq \&"pfe\&"} {
.Dl \& \& \& \&  expect -re {(ok|bye)}
.Dl \& \& \& \&  proc dosomethingwith {line} {
.Dl \& \& \& \& \& \& \& \&  if {[regexp {^[[:blank:]]*(\e\e[[:blank:]].*)?$} $line]} {
.Dl \& \& \& \& \& \& \& \& \& \& \& \& return
.Dl \& \& \& \& \& \& \& \& }
.Dl \& \& \& \& \& \& \& \&  send -- \&"$line\er\&"
.Dl \& \& \& \&  }
.Dl } elseif {$tocall eq \&"gdb\&"} {
.Dl \& \& \& \&  ...
.Pp
There is a default
.Cm dosomethingwith
that will be used if 
.Pa ~/.feedrc
does not set one. If this is a problem, end
.Pa ~/.feedrc
with something like:
.Pp
.Dl if {[info commands dosomethingwith] eq \&"\&"} {
.Dl \& \& \& \& puts stderr oops
.Dl \& \& \& \& exit 1
.Dl }
.Pp
Various other parts of the code of
.Nm
can be overridden from 
.Pa ~/.feedrc .
You get to keep all the pieces if you break something.
.Sh EXIT STATUS
.Ex -std
The exit status once
.Nm
has begun to
.Ic interact
with the given
.Ar command
will likely always be 0 (regardless how the
.Ar command
exits), unless a
.Dv HUP ,
.Dv PIPE ,
or
.Dv TERM
signal is sent.
.Sh EXAMPLES
From a 
.Xr vi 1
buffer containing LISP code, one could issue
.Pp
.Dl Ic :!feed % sbcl --noinform
.Pp
to feed the contents of the buffer to
.Pa sbcl .
Standard input is also supported as a source of input,
.Pp
.Dl $ Ic echo run -al \&| feed - gdb -q ls
.Pp
would run
.Pa ls
under
.Pa gdb
and then launch
.Pa ls
with the arguments
.Ar -al 
and then turn
.Pa gdb
over to the user. From an editor, one may use a
.Pa fooprog.gdb
file containing whatever GDB commands are necessary, e.g.
.Pp
.Dl shell make fooprog
.Dl set args some args
.Dl file ./fooprog
.Dl break somecall
.Dl commands
.Dl silent
.Dl watch somevarinsomecall
.Dl continue
.Dl end
.Dl run
.Pp
and then set your editor to feed this to
.Nm .
With
.Xr vim 1 ,
an appropriate mapping might look something like
.Pp
.Dl map <Leader>t :!feed % gdb -q<CR><CR>
.Pp
.Nm
assisted the design and debugging of the ZSH completion script for
.Nm ;
given a
.Pa vi
buffer containing
.Pp
.Dl rm ~/.zcompdump
.Dl fpath=(~/co/zsh/compdef $fpath)
.Dl autoload -U compinit && compinit
.Dl # fake completion on ls as want to see if complete its arguments
.Dl zstyle ':completion:*:*:feed:*:commands' fake-always ls
.Dl zstyle ':completion:*:*:feed:*:commands' ignored-patterns '*'
.Dl # stdin completion testing
.Dl #print -z 'echo foo | feed '
.Dl print -z 'feed '
.Pp
one can then feed a test shell invocation with these commands via
.Pp
.Dl Ic :!feed % zsh -f
.Pp
and then try out the tab completion (edited elsewhere) until it works. The
.Ar -f
to
.Pa zsh
prevents anything in the regular shell configuration from interfering
with the task at hand, though do note that undesirable environment
variables may be passed through from the parent process.
.Sh SEE ALSO
.Xr expect 1 ,
.Xr regexp n ,
.Xr Tcl n ,
.Xr vim 1 ,
.Xr zcomppoke 1
.Sh AUTHOR
.An Jeremy Mates
.Sh CAVEATS
The history may need to be disabled for the REPL, as repeated
.Nm
runs may spam the history for the REPL with repeated entries.
