.Dd January  6 2017
.Dt EPOCHAL 1
.nh
.Os
.Sh NAME
.Nm epochal
.Nd strptime(3) conversion of timestamps
.Sh SYNOPSIS
.Nm
.Bk -words
.Op Fl glsy
.Op Fl Y Ar year
.Op Fl o Ar output-format
.Fl f Ar input-format
.Op Ar file|-
.Ek
.Sh DESCRIPTION
.Nm
attempts to convert timestamps in standard input via a user-supplied
.Xr strptime 3
function to an output format (epoch by default, or customized via the
.Fl o
option), and emits the data to standard out.
Options:
.Bl -tag -width Ds
.It Fl f Ar input-format
Mandatory. Specifies input format timestamps will be detected with. The
.Xr strftime 3
manual details the format specification. Note that
.Qq Dv %s
is not supported as an input type, and should not be used. It is safe as
an output format. Also note that
.Qq Dv %Z
can cause issues, and may be best avoided or otherwise worked around.
.It Fl g
Multiple timestamps will be searched for and replaced on a line, instead
of just the first.
.It Fl l
Line buffer standard output. The default behavior is detailed in
.Xr setbuf 3 .
.It Fl o Ar output-format
Output format. The default is epoch time via
.Qq Dv %s .
This format is safe for output, but not as an input format due to a
stupid bug on Mac OS X (Bug 15753871).
.It Fl s
Non-timestamp data will be omitted from the output.
.It Fl y
Fill in the current year if the parsed
.Qq Dv tm_year
field is zero. The current year is only set when the program is launched.
.It Fl Y Ar year
Fill in the specified year if the parsed
.Qq Dv tm_year
field is zero. Last mentioned y-flag wins.
.El
.Sh EXIT STATUS
.Ex -std epochal
.Sh EXAMPLES
Parse 
.Xr syslogd(8)
logs assuming that the missing year is the current one, or a custom year:
.Pp
.Dl $ Ic epochal -f '%b %d %H:%M:%S' -y      < /path/to/syslog
.Dl $ Ic epochal -f '%b %d %H:%M:%S' -Y 1999 < /path/to/syslog
.Pp
Convert timestamps used by Apache access logs (and other programs):
.Pp
.Dl $ Ic epochal -f '[%d/%b/%Y:%H:%M:%S%n%z]' < /path/to/access
.Pp
Note that some systems may not handle the
.Qq Dv %z
timezone option, or may not support various conversion specifications:
.Pp
.Dl $ Ic epochal -f '[%d/%b/%Y:%H:%M:%S' < /path/to/access_log
.Pp
Though usually converting enough of the timestamp to epoch suffices for
subsequent awk/perl munging of the data.
.Pp
Note that the above will use line-based buffering as the output is to
a terminal.
.Nm
in pipelines may require the
.Fl l
flag to enable line-based buffering. See
.Xr setbuf 3
for details if this seems surprising.
.Sh SEE ALSO
.Xr date 1 ,
.Xr date2epoch 1 ,
.Xr epoch2date 1 ,
.Xr setbuf 3 ,
.Xr strftime 3 ,
.Xr strptime 3
.Sh AUTHOR
.An Jeremy Mates
.Sh CAVEATS
The various 
.Xr strftime 3
conversion specifications may not be portable, especially to more
eldritch flavors of Unix. They may even be buggy on older (e.g. OpenBSD
had a UTC related segfault when data followed
.Qq Dv %Z )
or as yet unfixed implementations. Non-UTC timezones have not been
tested. Daylight Savings Time has not been tested for (stop using such
horrid timezones!). There may be other unknown gotchas, depending on the
implementation of the system functions involved or the locale involved.
Microseconds in timestamps will require some sort of pre-filter.
.Pp
.Qq Dv %s
as mentioned above may not be used with the 
.Fl f Ar input-format
flag.
.Pp
Also, there may be unexpected date or time values depending on what is
missing from the
.Xr strptime 3
parse into the zero-by-default struct, for example if the month or day
of month is not parsed from the input. Patches welcome for such an
edge case.
