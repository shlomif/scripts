#!/usr/bin/env perl
#
# Generates crontab(5) compatible time specifications for near
# future runs.

use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use POSIX qw(strftime);

# NOTE do not change this without first understanding the logic of
# various combinations of fields. There's a surprise (that should be
# documented in crontab(5)).
sub CRON_TIME_FORMAT () { '%M %H %d %m *' }

GetOptions(
    'gmtime|gmt|g' => \my $Flag_GMT,
    'help|h|?'     => \&emit_help,
    'padby|p=i'    => \my $Flag_Pad_By,
) or exit 65;

if ( defined $Flag_Pad_By ) {
    if ( $Flag_Pad_By < 60 or $Flag_Pad_By > 300 ) {
        die "kronsoon: pad by time $Flag_Pad_By out of range\n";
    }
} else {
    # Could be set lower assuming you're on the ball about editing cron
    # and saving it and having crond pickup on the changes...
    $Flag_Pad_By = 89;
}

my $command;

shift @ARGV if @ARGV == 1 and $ARGV[0] eq '-';
if (@ARGV) {
    $command = "@ARGV";
} elsif ( !-t ) {
    $command = do { local $/; readline *STDIN };
    chomp($command);
}

my $when = time() + $Flag_Pad_By;

print strftime( CRON_TIME_FORMAT,
    $Flag_GMT ? gmtime($when) : localtime($when) ),
  ( defined $command ? " $command" : '' ), "\n";

sub emit_help {
    warn <<"END_USAGE";
Usage: kronsoon [--gmtime] [--padby=secs] [cron command|-]

Generates a cron timestamp for a run in the near future.

END_USAGE
    exit 64;
}
