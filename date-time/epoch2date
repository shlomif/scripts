#!/usr/bin/env perl
#
# Converts epoch times to strings perhaps more readable by humans.

use 5.14.0;
use warnings;
use Getopt::Long qw(GetOptions);
use POSIX qw(strftime);

GetOptions(
    'format|f=s' => \my $Flag_Format,
    'help|h|?'   => \&emit_help,
) or exit 65;

emit_help() unless @ARGV;

$Flag_Format //= '%Y-%m-%d %H:%M:%S %Z';
$Flag_Format =~ s/(\\[aefnrt])/qq!"$1"!/eeg;

@ARGV = readline *STDIN if $ARGV[0] eq '-';

for my $entry (@ARGV) {
    # negative epoch dubious? but why not
    for my $epoch ( $entry =~ m/(-?[0-9]+)/g ) {
        # NOTE systemtap apparently uses a microseconds-based epoch
        # (1475682078014325 -> 1475682078 014325) without being sensible
        # enough to put a dot or something between the elements. Sigh.
        # KLUGE smart guess which is which
        if ( length $epoch > 11 ) {
            warn_once("notice: guess microseconds for $epoch\n");
            $epoch /= 1e6;
        }
        say strftime( $Flag_Format, localtime($epoch) );
    }
}

sub emit_help {
    warn <<"END_USAGE";
Usage: epoch2date [options] epoch-numbers|-

Converts unix epoch to human readable dates.

  -f fmt  strftime(3) format for output date (ISO 8601 by default).

END_USAGE
    exit 64;
}

sub warn_once {
    state $has_warned;
    return if $has_warned;
    warn $_[0];
    $has_warned = 1;
}
