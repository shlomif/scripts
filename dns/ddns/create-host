#!/bin/sh
#
# Create forward and reverse record(s) for the given hostname.
#
#   create-host blah 192.0.2.42 2001:db8::c000:22a
#
# Reverse ownership might be tricky to figure out. This is why this
# script creates the reverse in a subsequent step, and does not rollback
# the forward record if the reverse creation fails. (Business logic to
# check what the NS are and then to vary the action taken depending on
# those results would greatly complicate this code, so...)

DOM=example.net
KEY=/etc/nsuk.key
DNS_TTL=3593

# e.g. for testing, or if running local to the master DNS server anyways;
# otherwise perhaps better to let nsupdate figure out where the request
# needs to go.
SERVER=127.0.0.1

MAXWAITSECS=7
PROG_NAME="`basename "$0"`"

[ "$#" -lt 2 ] && {
  echo >&2 "Usage: $PROG_NAME host ipaddress [ipaddr2 ..]"
  exit 64
}

HOST="$1"
shift

echo "$HOST" | fgrep "$DOM" >/dev/null && {
  echo >&2 "$PROG_NAME: use short host name"
  exit 65
}

[ -r "$KEY" ] || {
  echo >&2 "$PROG_NAME: cannot read nsupdate keyfile $KEY"
  exit 65
}

for arg in "$@"; do
  IP=`v4addr -q "$arg"`
  DNS_TYPE=A
  REV_PROG=v4addr
  if [ -z "$IP" ]; then
    IP=`v6addr -q "$arg"`
    if [ -z "$IP" ]; then
      echo >&2 "$PROG_NAME: could not parse v4 or v6 address from $arg"
      exit 65
    fi
    DNS_TYPE=AAAA
    REV_PROG=v6addr
  fi

  (
    if [ ! -z "$SERVER" ]; then
      echo "server $SERVER"
    fi
    # NOTE there used to be a 'prereq nxrrset $HOST.$DOM $DNS_TYPE'
    # limit here, though one could have a host with multiple A records,
    # so that limitation was removed.
    cat <<EOF
update add $HOST.$DOM $DNS_TTL $DNS_TYPE $arg
send
EOF
  ) | nsupdate -k "$KEY" -t "$MAXWAITSECS"

  STATUS=$?
  if [ "$STATUS" -ne 0 ]; then
    echo "$PROG_NAME: failed to update add $HOST.$DOM $DNS_TTL $DNS_TYPE $arg"
    exit "$STATUS"
  fi

  REV=`$REV_PROG -q -r "$arg"`
  if [ -z "$REV" ]; then
    echo >&2 "$PROG_NAME: $REV_PROG failed to parse reverse address from $arg"
    exit 65
  fi

  (
    if [ ! -z "$SERVER" ]; then
      echo "server $SERVER"
    fi
    cat <<EOR
prereq nxrrset $REV PTR
update add $REV $DNS_TTL PTR $HOST.$DOM.
send
EOR
  ) | nsupdate -k $KEY -t $MAXWAITSECS

  STATUS=$?
  if [ "$STATUS" -ne 0 ]; then
    echo "$PROG_NAME: failed to update add $REV $DNS_TTL PTR $HOST.$DOM."
    exit "$STATUS"
  fi
done
