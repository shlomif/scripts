#!/usr/local/bin/sh
#
# Deletes MX records for a host, all of them if none are specified. When
# specifying MX, both the priority and the fully qualified MX hostname
# must be supplied:
#
#   create-host blah 192.0.2.42 2001:db8::c000:22a
#   create-mx blah blah.example.net 12
#   delete-mx blah 12 blah.example.net
#
# The create-mx reversed order is because the priority is optional, and
# a default priority used if none is specified.

DOM=example.net
KEY=/etc/nsuk.key

# e.g. for testing, or if running local to the master DNS server anyways;
# otherwise perhaps better to let nsupdate figure out where the request
# needs to go.
SERVER=127.0.0.1

MAXWAITSECS=7
PROG_NAME="`basename "$0"`"

[ "$#" -eq 0 ] && {
  echo >&2 "usage: $PROG_NAME host [0 mx1.dom. [10 mx2.dom. ..]]"
  exit 64
}

HOST="$1"
shift

echo "$HOST" | fgrep "$DOM" >/dev/null && {
  echo >&2 "$PROG_NAME: use short host name"
  exit 65
}

if [ "$#" -eq 0 ]; then
  (
    if [ ! -z "$SERVER" ]; then
      echo "server $SERVER"
    fi
    cat <<EOF
prereq yxrrset $HOST.$DOM. MX
update delete $HOST.$DOM. MX
send
EOF
  ) | nsupdate -k "$KEY" -t "$MAXWAITSECS"

  STATUS=$?
  if [ "$STATUS" -ne 0 ]; then
    echo "$PROG_NAME: failed to delete $HOST.$DOM. MX"
  fi
  exit "$STATUS"
fi

if [ `expr "$#" % 2` -ne 0 ]; then
  echo >&2 "$PROG_NAME: priorities and mx must come in pairs"
  exit 65
fi

while [ "$#" -gt 0 ]; do
  PRI="$1"
  MXH="$2"
  shift 2
  (
    if [ ! -z "$SERVER" ]; then
      echo "server $SERVER"
    fi
    cat <<EOM
prereq yxrrset $HOST.$DOM. MX $PRI $MXH
update delete $HOST.$DOM. MX $PRI $MXH
send
EOM
  ) | nsupdate -k "$KEY" -t "$MAXWAITSECS"

  STATUS=$?
  if [ "$STATUS" -ne 0 ]; then
    echo "$PROG_NAME: failed to delete $HOST.$DOM. MX $PRI $MXH"
    exit "$STATUS"
  fi
done
