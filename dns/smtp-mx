#!/usr/bin/env perl
#
# smtp-mx - returns the MX server(s) for the domain(s) in question

use 5.16.0;
use warnings;
use Getopt::Long qw(GetOptions);
use List::Util qw(shuffle);
use Net::DNS;

Getopt::Long::Configure("bundling");
GetOptions(
    'help|h|?'    => \&emit_help,
    'quiet|q'     => \my $Flag_Quiet,
    'one|1'       => \my $Flag_OnlyOne,
    'shuffle|s|r' => \my $Flag_Shuffle,
) or exit 65;

my $dns = Net::DNS::Resolver->new;
$dns->defnames(0);    # do not search default domain

shift @ARGV if @ARGV == 1 and $ARGV[0] eq '-';
chomp(@ARGV = readline) if !@ARGV;

for my $domain (@ARGV) {
    unless ($dns->query($domain, 'SOA')) {
        say STDERR "warning: no SOA record for '$domain'";
        next;
    }
    say +(@ARGV > 1 ? "$domain: " : q{}), join ' ', get_mx($domain);
}

sub get_mx {
    my ($domain) = @_;
    my @mx;
    my $mxresult = $dns->query($domain, 'MX');
    if ($mxresult) {
        for my $rr ($mxresult->answer) {
            push @mx, $rr->exchange if $rr->type eq 'MX';
        }
    } else {
        # if no MX use A record (or possibly AAAA) but this code does
        # not actually verify whether the A (or AAAA (or A6, sheesh))
        # actually exists
        say STDERR "notice: no MX record for '$domain'" if !$Flag_Quiet;
        push @mx, $domain;
    }

    @mx = shuffle @mx if $Flag_Shuffle;
    @mx = $mx[0] if $Flag_OnlyOne;
    return @mx;
}

sub emit_help {
    warn <<"END_USAGE";
Usage: smtp-mx [options] [list-of-domains|-]

Prints the MX records(s) for the domain(s) in question.

  -r     Randomize MX list. (Default: order returned by Net::DNS)
  -1     Limit output to first MX only.

  -q     Produce less warnings.

END_USAGE
    exit 64;
}
