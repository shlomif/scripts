                       this in! UDP is, news at

Mostly practice via a reading of "Beej's Guide to Network Programming"
plus a work need to test various UDP related setups (or to see how many
UDP packets are lost in what circumstances). There are probably better
ways, altagoobingleduckgo them.

 * udp-sender sends packets, udp-sink listens for them. A counter is
   passed in the packet, soas to detect lost or out-of-order
   packets. Error checking is done at most every step, insofar as
   UDP allows for that.
 * Should be portable between Debian (6.0.7) Mac OS X (10.8) OpenBSD
   (5.2), though most testing done on OS X.

Usage:

  ./udp-sender
    -4 | -6     Selects IPv4 or IPv6 (default is unspecified)
    -c n        Send count packets (default is a large number)
    -d ms | -f  Delay in milliseconds or flood the packets (default 5 ms)
    -N          -d is in nanoseconds not milliseconds
    -P octets   Pad packet to this many octets (default sizeof(uint32_t))
    -p portnum  Port number to send to - mandatory
    hostname    Host to connect to - mandatory

  ./udp-sink
    -4 | -6     Selects IPv4 or IPv6 (default is unspecified)
    -c n        Print stats ever so many packets (default 10000)
    -d ms       Delay in milliseconds after processing packet (-f is implicit)
    -l          Line buffer output instead of default - see setbuf(3)
    -N          -d is in nanoseconds not milliseconds
    -P octets   Pad packet to this many octets (default sizeof(uint32_t))
    -p portnum  Port number to listen on - mandatory

So to test:

  ./udp-sink   -p 2952 -c 10000 -l | tee log

And feed it:

  ./udp-sender -p 2952 -f localhost

(The sink may need a low -c argument if high packet loss is expected,
as fewer packets will get through and thus the stats will be printed
less often.)

Questions:

What happens via loopback interface? If the system is busy? What happens
to virts, or between virts? If there is loss, how much does adding delay
remove the loss? Does running udp-sink & change the loss rate? What
happens to the loss rate if udp-sink needs to do more work between
recvfrom() calls? How could multiple sending processes (multiple
counters) be supported by udp-sink?

For More Reading Consider:

G. Sankaranarayanan, L. Potter, B. Hannaford, 'Measurement and
Simulation of Time Varying Packet Delay with Applications to Networked
Haptic Virtual Environments,' Proceedings of 1st international
Conference on Robot Communication and Coordination (Robocom 2007), pp.
1-8, IEEE Press, Piscataway, NJ., Athens, Greece, October 2007.

http://brl.ee.washington.edu/BRL_Pubs/Pdfs/Rep210.pdf
