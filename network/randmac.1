.Dd November 24 2018
.Dt RANDMAC 1
.nh
.Os
.Sh NAME
.Nm randmac
.Nd generate random MAC address
.Sh SYNOPSIS
.Bk -words
.Nm
.Op Fl 6hLmp
.Op Fl B Ar bytes
.Op Ar XX:XX...
.Ek
.Sh DESCRIPTION
.Nm
generates random MAC addresses.
.Pp
Options:
.Bl -tag -width -indent
.It Fl 6
IPv6ifies (EUI-64) a 48-bit MAC address, and will flip a bit, 
independent of the
.Fl L
flag. However, the 
.Fl L
flag might be handy with 
.Fl 6
to avoid the otherwise mandatory 
.Fl m
or
.Fl p
related flips.
.It Fl B Ar bytes
The bytes flag and a corresponding number of hex-or-X characters given
as the first argument to this program allow for other sizes of MAC
addresses to be generated.
.It Fl L
enforces a literal MAC address.
.It Fl m
sets the multicast MAC bit. IPv4 and IPv6 set certain MAC prefixes
(see below) for their multicast traffic. NOTE lacking the
.Fl m
or
.Fl p
flags, the default is to generate a public, non-multicast address.
.It Fl p
sets the private MAC bit (very unlikely to be assigned by IEEE, but
see below).
.El
.Sh EXIT STATUS
.Ex -std
.Sh EXAMPLES
Public random 48-bit MAC.
.Pp
.Dl $ Ic randmac
.Pp
Private and less random MAC.
.Pp
.Dl $ Ic randmac -p XX:12:34:56:78:XX
.Pp
Private MAC-64.
.Pp
.Dl $ Ic randmac -B 8 -p XX:XX:XX:XX:XX:XX:XX:XX
.Pp
IPv6 link-local.
.Pp
.Dl $ Ic randmac -L6 00:11:22:XX:XX:XX \&| sed 's/^/fe80::/'
.Pp
Prefix material may throw off calculations for the 
.Fl m
and
.Fl p
options. Use
.Xr sed 1
afterwards to workaround this limitation, for example to generate a
random filename for use under the pxelinux.cfg directory:
.Pp
.Dl $ Ic randmac -p XX-XX-XX-XX-XX-XX \&| sed 's/^/01-/'
.Sh RUMINATIONS
A digression on bits, the contents of out.txt as provided by IEEE, and
IP multicast specifics follows.
.Pp
If one compares the penultimate bit of the first octet of 40:a6:d9 and 
42:a6:d9:
.Pp
.Dl $ Ic perl \-e 'printf \&"%08b\en\&", 0x40'
.Dl 01000000
.Dl $ Ic perl \-e 'printf \&"%08b\en\&", 0x42'
.Dl 01000010
.Dl \& \& \& \& \& \& ^
.Pp
42:a6:d9 is private as it enables the penultimate bit; 40:a6:d9 does 
not (and is assigned to Apple). However! There appear to be several 
registered OUI that set the private or broadcast bits:
.Bd -literal -offset indent
$ < oui.txt perl -ne '$s{$1}++ if m/^\es*(..)-.*\e(hex/;' \e
  -e 'END { printf "%08b %s\en", hex($_), $_ for sort keys %s }' \e
  | perl -nle 'print if m/1. / or m/1 /'
00000010 02
00010001 11
10101010 AA
.Ed
.Pp
These perhaps should be avoided in "private" assignments. The 11 
(broadcast bit enabled) is a single assignment:
.Pp
.Dl   11-00-AA   (hex)           PRIVATE
.Pp
While the 02 (various companies) and AA (DEC) show 18 globally assigned
prefixes in the private address space. Doubtless the odds of a random
private address landing in one of these subnets and conflicting with
actual hardware on a network is low.
.Pp
IPv4 broadcast sets all ones, IPv4 multicast uses a prefix of 01:00:5e,
and IPv6 multicast the prefix 33:33.
.Nm
may generate random MAC within these ranges; other code will be
necessary to guard against that, or restrict the template so that
addresses in these ranges cannot be generated.
.Sh SEE ALSO
.Xr ifconfig 8 ,
.Xr ip6tomac 1 ,
.Xr macnorm 1
.Pp
https://standards.ieee.org/develop/regauth/oui/oui.txt
.Sh AUTHOR
.An Jeremy Mates
