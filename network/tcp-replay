#!/usr/bin/env perl
#
# Simplistic TCP traffic replay: replays TCP sessions recorded by
# tcpdump by sending the previous client request data payloads to the
# destination via a new TCP connection. Does not reproduce sequence
# numbers, nor handle anything coming back from the server.
#
# Handy if one (hypothetically) has a LDAP server that only crashes when
# exposed to production traffic, but never to test traffic, nor the same
# requests logged in production replayed via ldapsearch or Net::LDAP.
# Replayed Kerberos or other time-sensitive protocols will fail with
# this method, but might still provide a test whether the server
# properly handles invalid traffic:
#
# https://bugzilla.redhat.com/show_bug.cgi?id=668619
# https://www.redhat.com/security/data/cve/CVE-2011-1067.html
#
# Script will be memory intensive to the tune of the number of
# connections in the tcpdump file. The script may need to be manually
# tuned to suit the exact test condition.
#
# Collect the input data via something like:
#   tcpdump -vv -c 100000 -s 0 -w traffic-tcpdump port 389
#
# Then run:
#   tcp-replay -s SERVERIP -d REPLAYSERVERIP -p 389
#
# Where SERVERIP is the address the desired TCP traffic is going to, and
# REPLAYSERVERIP the test server the TCP payloads should be resent to.

use strict;
use warnings;

my ( $SRC_IP,       $DST_IP, $PORT );
my ( $tcpdump_file, $oDump,  %seen );

# Maximum seconds to wait between sending packets when replicating
# timing from production traffic.
my $MAX_DELAY = 10;

use Getopt::Long qw(GetOptions);
GetOptions(
    "src|s=s"  => \$SRC_IP,
    "dst|d=s"  => \$DST_IP,
    "port|p=s" => \$PORT
);

if ( !defined $PORT and $DST_IP =~ m/^(.*?):(\d+)$/ ) {
    $DST_IP = $1;
    $PORT   = $2;
}

$tcpdump_file = shift;
if (   !defined $tcpdump_file
    or !defined $SRC_IP
    or !defined $DST_IP
    or !defined $PORT ) {
    warn "Usage: tcp-replay -s src-ip -d dst-ip -p port traffic-tcpdump\n";
    exit 64;
}

use List::Util qw/shuffle/;
use IO::Socket::INET;
use Net::Frame::Dump::Offline;
use Net::Frame::Simple;
use Net::Frame::Layer::IPv4 qw(:consts);
use Net::Frame::Layer::TCP qw(:consts);
use Time::HiRes qw(sleep);

########################################################################
#
# COLLECTION
#
# Build stash of previous full TCP connections. Sessions started prior
# to the tcpdump starting will be ignored. Consider stashing the parsed
# streams via Storable or some other format for faster future replays.

$oDump = Net::Frame::Dump::Offline->new( file => $tcpdump_file );
$oDump->start;

DGRAM: while ( my $h = $oDump->next ) {
    my $f = Net::Frame::Simple->new(
        raw        => $h->{raw},
        firstLayer => $h->{firstLayer},
        timestamp  => $h->{timestamp},
    );

    my $orig_ipv4;

    for my $l ( $f->layers ) {
        if ( ref $l eq 'Net::Frame::Layer::IPv4' ) {
            next DGRAM if $l->dst ne $SRC_IP;
            $orig_ipv4 = $l;

        } elsif ( ref $l eq 'Net::Frame::Layer::TCP' ) {
            if ( $l->flags & NF_TCP_FLAGS_SYN ) {
                push @{ $seen{ $orig_ipv4->src . $l->src } },
                  { ip => $orig_ipv4, tcp => $l, ts => $h->{timestamp} };
            } else {
                if ( exists $seen{ $orig_ipv4->src . $l->src } ) {
                    push @{ $seen{ $orig_ipv4->src . $l->src } },
                      { ip => $orig_ipv4, tcp => $l, ts => $h->{timestamp} };
                }
            }
        }
    }
}
$oDump->stop;
warn "info: parsed ", scalar keys %seen, " full TCP connections\n";

########################################################################
#
# REPLAY
#
# Simplistic replay: sends previous payloads over a new TCP connection.
# Disregards server responses!

$SIG{ALRM} = sub { die "timeout\n" };

#while (1) {
for my $conn ( shuffle values %seen ) {
    my $max_wait = scalar(@$conn) * $MAX_DELAY;

    eval {
        alarm $max_wait;

        my $io = IO::Socket::INET->new( PeerAddr => "$DST_IP:$PORT", Proto => "tcp" )
          || die "could not connect to $DST_IP:$PORT: $!\n";
        my $prior_epoch = 0;

        for my $frame (@$conn) {
            my $cur_epoch = $frame->{ts} || 0;
            if ( defined $frame->{tcp}->payload
                and length $frame->{tcp}->payload > 0 ) {

                print time(), " ", $frame->{ip}->src, ":",
                  $frame->{tcp}->src,
                  " ipv4-id ",
                  $frame->{ip}->id, " tcp-seq ", $frame->{tcp}->seq, "\n";
                $io->send( $frame->{tcp}->payload );

                my $delay = $cur_epoch - $prior_epoch;
                if ( $delay <= 0 or $delay > $MAX_DELAY ) {
                    $delay = 0.1 + rand();
                }
                sleep $delay;
            }
            $prior_epoch = $cur_epoch;
        }

        alarm 0;

        # Be a good network citizen (otherwise may see RST related logs on
        # the server)
        sleep 0.1 + rand();
        $io->shutdown(2);
        $io->close();
    };
    if ($@) {
        # Could instead just warn here and keep hammering server. If so,
        # consider a sleep to avoid frequent quick failures from running up
        # the CPU. (Or similar if the script is being run in a loop from the
        # command line.)
        die $@;
    }
}
#}

exit 0;
