#!/usr/bin/env perl
#
# ow - shortcuts and directory to URL mapping

use 5.14.0;
use warnings;
use Cwd ();
use File::Basename qw(basename);
use File::HomeDir ();
use File::Spec    ();
use Getopt::Long qw(GetOptions);
use Text::ParseWords qw(shellwords);
use URI ();

my $do_something = basename($0) eq 'wv' ? \&do_directory : \&do_shortcut;

GetOptions(
    'always-remap|A' => \my $Flag_AlwaysRemap,
    'chdir|C:s'      => \my $Flag_Chdir,
    'directory|d'    => sub { $do_something = \&do_directory },
    'help|h|?'       => \&emit_help,
    'list|l'         => \my $Flag_ListURL,
    'open|o=s'       => \my $Flag_Method,
) or exit 65;

my $Open_With = loadconfig( path_to('browsers') );
my $Re_Map    = loadremap( path_to('remap') );

exit $do_something->();

sub do_directory {
    my $dirmap = loadconfig( path_to('dirmap') );

    my $dir = Cwd::getcwd;

    for my $mapent ( sort { length $b <=> length $a } keys %$dirmap ) {
        my $pos = index $dir, $mapent;
        if ( $pos > -1 ) {
            my $frag = substr( $dir, $pos + length $mapent ) || q{};

            # prevent // issues
            $frag =~ s{^/+}{} if $dirmap->{$mapent} =~ m{/%[@\d]}a;

            $dirmap->{$mapent} =~ s{%(\@|\d+)/}{%$1}g if $frag eq q{};

            visit( fill_in( $dirmap->{$mapent}, $frag ) );
        }
    }
    visit( 'file://' . $dir );
}

sub do_shortcut {
    emit_help() unless @ARGV;
    my $shortcut = loadconfig( path_to('shortcuts') );

    if ( @ARGV == 1 ) {
        if ( exists $shortcut->{ $ARGV[0] } ) {
            visit( $shortcut->{ $ARGV[0] } );
        } elsif ( $ARGV[0] =~ m{^\w+://.} ) {
            # NOTE above regex won't match foo+bar:// style URL, but I
            # don't much use those, and not with this script
            visit( $ARGV[0] );
        } elsif ( $ARGV[0] =~ m{[./]} ) {
            # possibly a "foo/bar" path or "example.org" hostname?
            if ( -e $ARGV[0] ) {
                visit( 'file://' . File::Spec->rel2abs( $ARGV[0] ) );
            } else {
                visit( 'http://' . $ARGV[0] );
            }
        } elsif ( exists $shortcut->{'*'} ) {
            visit( fill_in( $shortcut->{'*'}, $ARGV[0] ) );
        } else {
            die "ow: not sure what to do with '$ARGV[0]'\n";
        }
    } else {
        my $key = shift @ARGV;

        # shortcuts that take parameters have a trailing @ on them, but
        # user must not type that
        $key .= '@';

        if ( exists $shortcut->{$key} ) {
            visit( fill_in( $shortcut->{$key}, @ARGV ) );
        } else {
            die "ow: no such shortcut '$key'\n";
        }
    }
}

sub emit_help {
    warn <<"END_USAGE";
Usage: ow [options] [ shortcut [shortcut args ..] | file | url ]

Shortcuts or file to URL or browser mapping.

  -A     Always perform remapping (even if -o used)
  -d     Perform directory mapping instead of shortcut lookup ("wv")
  -l     Print URL instead of calling web client
  -o oo  Use specified open method instead of the default

END_USAGE
    exit 64;
}

sub fill_in {
    my $template_url = shift;
    # on the assumption that search sites use + to join terms...
    $template_url =~ s/\Q%@/join '+', @_/ge;
    $template_url =~ s/%(\d+)/$_[$1-1]||q{}/aeg;
    my $url = URI->new($template_url)->canonical;
    warn "notice: could not canonify URL '$template_url'\n" unless $url;
    return $url;
}

sub loadconfig {
    my ($file) = @_;
    open my $fh, '<', $file or die "ow: could not open '$file': $!\n";
    my $hashref;
    while ( readline $fh ) {
        next if /^(?:#|$)/;
        my @pair = $_ =~ m/^(\S+)\s+(\S.+?)\s*$/;
        $hashref->{ $pair[0] } = $pair[1] if @pair == 2;
    }
    return $hashref;
}

sub loadremap {
    my ($file) = @_;
    open my $fh, '<', $file or die "ow: could not open '$file': $!\n";
    my $relist;
    while ( readline $fh ) {
        next if /^(?:#|$)/;
        my @pair = $_ =~ m/^(\S+)\s+(\S.+?)\s*$/;
        push @$relist, \@pair if @pair == 2;
    }
    return $relist;
}

sub path_to { File::Spec->catfile( File::HomeDir->my_home, '.ow', $_[0] ) }

sub visit {
    my ($url) = @_;

    if ($Flag_ListURL) {
        say $url;
        exit;
    }

    my @command;

    if ( $Flag_AlwaysRemap xor !$Flag_Method ) {
        for my $map (@$Re_Map) {
            if ( $url =~ m{$map->[0]} ) {
                @command = shellwords( $map->[1] );
                last;
            }
        }
    }

    if ( !@command ) {
        @command = (
              defined $Flag_Method   ? shellwords($Flag_Method)
            : exists $ENV{OW_METHOD} ? shellwords( $ENV{OW_METHOD} )
            :                          'w3m'
        );
    }

    if ( @command == 1 and exists $Open_With->{ $command[0] } ) {
        @command = shellwords( $Open_With->{ $command[0] } );
    }

    if ( defined $Flag_Chdir ) {
        $Flag_Chdir = File::HomeDir->my_home unless length $Flag_Chdir;
        chdir($Flag_Chdir) or die "ow: could not chdir '$Flag_Chdir': $!\n";
    }
    exec( @command, $url ) or die "ow: could not exec '@command': $!\n";
}
