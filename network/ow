#!/usr/bin/env perl
#
# ow - shortcuts and directory to URL mapping

use 5.14.0;
use warnings;
use Cwd ();
use File::Basename qw(basename);
use File::HomeDir ();
use File::Spec    ();
use Getopt::Long qw(GetOptions);
use Text::ParseWords qw(shellwords);
use URI ();

my $do_something = basename($0) eq 'wv' ? \&do_directory : \&do_shortcut;

GetOptions(
    'chdir|C:s'   => \my $Flag_Chdir,
    'directory|d' => sub { $do_something = \&do_directory },
    'help|h|?'    => \&emit_help,
    'list|l'      => \my $Flag_ListURL,
    'open|o=s'    => \my $Flag_Method,
) or exit 65;

my $Open_With = loadconfig( path_to('browsers') );
my $Browser_Command = env_option_or( 'OW_METHOD', $Flag_Method, 'w3m' );

exit $do_something->();

sub do_directory {
    my $dirmap = loadconfig( path_to('dirmap') );

    my $dir = Cwd::getcwd;

    for my $mapent ( sort { length $b <=> length $a } keys %$dirmap ) {
        my $pos = index $dir, $mapent;
        if ( $pos > -1 ) {
            my $frag = substr( $dir, $pos + length $mapent ) || q{};

            # prevent // issues
            $frag =~ s{^/+}{} if $dirmap->{$mapent} =~ m{/%[@\d]}a;

            $dirmap->{$mapent} =~ s{%(\@|\d+)/}{%$1}g if $frag eq q{};

            visit( fill_in( $dirmap->{$mapent}, $frag ) );
            return 0;
        }
    }
    visit( 'file://' . $dir );
    return 0;
}

sub do_shortcut {
    emit_help() unless @ARGV;
    my $shortcut = loadconfig( path_to('shortcuts') );

    if ( @ARGV == 1 ) {
        if ( exists $shortcut->{ $ARGV[0] } ) {
            visit( $shortcut->{ $ARGV[0] } );
        } elsif ( $ARGV[0] =~ m{^\w+://.} ) {
            # NOTE above regex won't match foo+bar:// style URL, but I
            # don't much use those, and not with this script
            visit( $ARGV[0] );
        } elsif ( $ARGV[0] =~ m{[./]} ) {
            # possibly a "foo/bar" path or "example.org" hostname?
            if ( -e $ARGV[0] ) {
                visit( 'file://' . File::Spec->rel2abs( $ARGV[0] ) );
            } else {
                visit( 'http://' . $ARGV[0] );
            }
        } elsif ( exists $shortcut->{'*'} ) {
            visit( fill_in( $shortcut->{'*'}, $ARGV[0] ) );
        } else {
            die "ow: not sure what to do with '$ARGV[0]'\n";
        }
    } else {
        my $key = shift @ARGV;

        # shortcuts that take parameters have a trailing @ on them, but
        # user must not type that
        $key .= '@';

        if ( exists $shortcut->{$key} ) {
            visit( fill_in( $shortcut->{$key}, @ARGV ) );
        } else {
            die "ow: no such shortcut '$key'\n";
        }
    }
    return 0;
}

sub emit_help {
    warn <<"END_USAGE";
Usage: ow [options] site [site args ..]

Shortcuts and file to URL mapping.

  -d     Perform directory mapping instead of shortcut lookup ("wv").
  -l     Print URL instead of calling web client.
  -o oo  Use specified open method instead of the default.

END_USAGE
    exit 64;
}

sub env_option_or {
    my ( $env, $option, $fallback ) = @_;
    my @cmd = (
          defined $option   ? shellwords($option)
        : exists $ENV{$env} ? shellwords( $ENV{$env} )
        :                     $fallback
    );
    if ( @cmd == 1 and exists $Open_With->{ $cmd[0] } ) {
        @cmd = shellwords( $Open_With->{ $cmd[0] } );
    }
    return \@cmd;
}

sub fill_in {
    my $template_url = shift;
    # on the assumption that search sites use + to join terms...
    $template_url =~ s/\Q%@/join '+', @_/ge;
    $template_url =~ s/%(\d+)/$_[$1-1]||q{}/aeg;
    my $url = URI->new($template_url)->canonical;
    warn "notice: could not canonify URL '$template_url'\n" unless $url;
    return $url;
}

sub loadconfig {
    my ($file) = @_;
    my $hashref;
    open my $fh, '<', $file or die "ow: could not open '$file': $!\n";
    while ( readline $fh ) {
        chomp;
        next if /^\s*#/;
        s/\s+$//;
        next if /^$/;
        my ( $key, $value ) = split ' ', $_, 2;
        $hashref->{$key} = $value if $key and $value;
    }
    return $hashref;
}

sub path_to { File::Spec->catfile( File::HomeDir->my_home, '.ow', $_[0] ) }

sub visit {
    my ($url) = @_;

    if ($Flag_ListURL) {
        say $url;
        return;
    }

    # KLUGE target Dictionary.app on Mac OS X - otherwise would need a
    # more complicated configuration that would map certain shortcuts to
    # certain methods on certain OS...
    $Browser_Command = ['open'] if $url =~ m{^dict://};

    if ( defined $Flag_Chdir ) {
        $Flag_Chdir = File::HomeDir->my_home unless length $Flag_Chdir;
        chdir($Flag_Chdir) or die "ow: could not chdir '$Flag_Chdir': $!\n";
    }

    system( @$Browser_Command, $url ) == 0
      or die "ow: error calling '@$Browser_Command': $?\n";
}
