#!/usr/bin/env perl
#
# Test LDAP Virtual List View (VLV) queries. These are used by some LDAP
# client system libraries (Solaris), and may fail ACI checks, especially
# if the LDAP client does not bind.
#
# test-vlv-query  -h ldapserver  -b searchbase  optionalldapfilter
#
# Code mostly just lifted from the SYNOPSIS of the LDAP modules.

use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use Net::LDAP;
use Net::LDAP::Control::Sort;
use Net::LDAP::Control::VLV;
use Net::LDAP::Constant qw( LDAP_CONTROL_VLVRESPONSE );

my ( $host, $base, $filter, $ldap, $vlv, $sort, @args, $mesg, $resp );

GetOptions( 'host|h' => \$host, 'base|b' => \$base );
$filter = shift;

if ( !defined $host or !defined $base or !$defined $filter ) {
  warn "Usage: $0 -h host -b searchbase ldapfilter\n";
  exit 64;
}

$ldap = Net::LDAP->new( $host, onerror => 'die' );

# NOTE testing how unbound connections work, so disable this
#$mesg = $ldap->bind();

$vlv = Net::LDAP::Control::VLV->new(
  before  => 0,
  after   => 19,
  content => 0,
  offset  => 1,
);
$sort = Net::LDAP::Control::Sort->new( order => 'uid' );
@args = (
  base     => $base,
  callback => \&process_entry,
  control  => [ $vlv, $sort ],
  scope    => 'subtree',
);

$mesg = $ldap->search(@args);
($resp) = $mesg->control(LDAP_CONTROL_VLVRESPONSE);
$vlv->response($resp);

exit 0;

########################################################################
#
# SUBROUTINES

# Nothing too exciting, just testing that output returned, query does
# not fail. Run before/after changes or updates to see if something
# breaks during such events.
sub process_entry {
  my ( $mesg, $entry ) = @_;

  if ( defined $entry and ref $entry eq 'Net::LDAP::Entry' ) {
    print $entry->dn, " ";
    for my $attr ( $entry->attributes ) {
      print join( "=", $attr, $entry->get_value($attr) ), " ";
    }
    print "\n";
  }
}

END {
  unless ( close(STDOUT) ) {
    warn "error: problem closing STDOUT: $!\n";
    exit 74;
  }
}
