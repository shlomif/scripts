#!/usr/bin/env expect
#
# repod - git repository remote wrapper with some remote init on the side

package require Tcl 8.5

set git_init_cmd {git init}
set ssh_cmd {ssh -aqx -e none -o BatchMode=yes -o ClearAllForwardings=yes -o PreferredAuthentications=hostbased,publickey,gssapi-with-mic -o StrictHostKeyChecking=yes}

proc alter_path {target host path} { return $path }

proc finddirup {what} {
    set cur_dir [pwd]
    set no_enter [file dirname ~]
    while 1 {
        set wanted [file join $cur_dir $what]
        if {[file isdirectory $wanted]} { return $cur_dir }
        set new_dir [file dirname $cur_dir]
        if {$new_dir eq $cur_dir} { return "" }
        if {$new_dir eq $no_enter} { return "" }
        set cur_dir $new_dir
    }
}

catch {source $env(HOME)/.repodrc} cresult coptions

proc die  {msg} { warn $msg; exit 1 }
proc warn {msg} { puts stderr "repod: $msg" }

proc emit_help {} {
    puts stderr "Usage: repod github\n       repod \[init|remote] hostname \[dir]"
    exit 64
}
if {[llength $argv] == 0} { emit_help }

if {[dict get $coptions -code] != 0} {
    if {![string match "POSIX ENOENT *" [dict get $coptions -errorcode]]} {
        warn [dict get $coptions -errorinfo]
        die "could not source ~/.repodrc"
    }
}

set repo_path [finddirup .git]
if {$repo_path eq ""} { die "could not find a git repo above [pwd]" }
set repo [lindex [split $repo_path "/"] end]

proc add_git_remote {name newurl} {
    set oldurl [git_remote_geturl $name]
    if {$oldurl eq ""} {
        set means "add"
    } elseif {$oldurl ne $newurl} {
        warn "notice: $name changes $oldurl to $newurl"
        set means "set-url"
    } else { return }
    catch {exec git remote $means $name $newurl} cresult coptions
    if {[dict get $coptions -code] != 0} { die "git remote $means $name $newurl: $cresult" }
}

proc add_git_ssh_remote {host path} {
    if {[file pathtype $path] eq "relative"} { set path "/~/$path" }
    add_git_remote $host ssh://$host$path
}

proc git_remote_geturl {name} {
    set url ""
    catch {exec git remote get-url $name} cresult coptions
    if {[dict get $coptions -code] == 0} { set url $cresult }
    return $url
}

proc relative2home {path} {
    global env
    regsub $env(HOME)/ $path ""
}

########################################################################
#
# TARGETS

set target [lindex $argv 0]; if {$target eq ""} { emit_help }

if {$target eq "github"} {
    set git_user [exec git config github.user]
    if {$git_user eq ""} { die "no username from 'git config github.user'" }
    add_git_remote github git@github.com:$git_user/$repo
    exit
} elseif {$target ne "init" && $target ne "put" && $target ne "remote"} {
    warn "unknown target '$target'"
    emit_help
}

set hostname [lindex $argv 1]
if {$hostname eq ""} {
    warn "target '$target' requires a hostname"
    emit_help
}
set directory [lindex $argv 2]
if {$directory eq ""} {
    set directory "[alter_path $target $hostname [relative2home $repo_path]]"
}

if {$target eq "init"} {
    append directory .git
    # per git-init(1) "Running git init in an existing repository is
    # safe" and git handles the creation of any necessary parent
    # directories, so just do that
    exec {*}$ssh_cmd $hostname "$git_init_cmd --bare $directory"
} elseif {$target eq "put"} {
    exec {*}$ssh_cmd $hostname "$git_init_cmd $directory"
    exec {*}$ssh_cmd $hostname "git --git-dir=$directory/.git config receive.denyCurrentBranch ignore"
}

add_git_ssh_remote $hostname $directory

if {$target eq "put"} {
    puts stderr "after push will need on remote\n    git reset --hard"
}
