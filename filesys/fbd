#!/usr/bin/env perl
#
# Finds files with same (or similar) modification times as specified
# file (or a user-supplied date).

use 5.16.0;
use warnings;
use File::Find qw(find);
use Getopt::Long qw(GetOptions);

GetOptions(
    'around|a=s'  => \my $Flag_AroundAbout,
    'before|b=s'  => \my $Flag_Before,
    'epoch|e=s'   => \my $Flag_ReferenceEpoch,
    'file|f=s'    => \my $Flag_ReferenceFile,
    'help|h|?'    => \&emit_help,
    'statfield=i' => \my $Flag_StatField,
) or exit 65;

$Flag_StatField //= 9;    # mtime
if ( $Flag_StatField < 8 or $Flag_StatField > 10 ) {
    die "statfield must be one of 8 9 10 (perldoc -f stat)\n";
}

my ( $min_epoch, $max_epoch, $reference_epoch );

if ($Flag_ReferenceFile) {
    $reference_epoch = ( lstat($Flag_ReferenceFile) )[$Flag_StatField];
} elsif ($Flag_ReferenceEpoch) {
    # advanced date parsing: make someone else do it
    die "epoch must be non-negative integer\n"
      if $Flag_ReferenceEpoch !~ m/^[0-9]+$/;
    $reference_epoch = $Flag_ReferenceEpoch;
} else {
    $reference_epoch = time();
}

if ($Flag_AroundAbout) {
    my $fudge = duration2seconds($Flag_AroundAbout);
    $min_epoch = $reference_epoch - $fudge;
    $max_epoch = $reference_epoch + $fudge;
}
if ($Flag_Before) {    # makes AroundAbout "After"
    my $fudge = duration2seconds($Flag_Before);
    $min_epoch = $reference_epoch - $fudge;
    $max_epoch = $reference_epoch unless defined $max_epoch;
}

@ARGV = '.' if !@ARGV;
# see NOTE below
#$File::Find::dont_use_nlink = 1;
find( \&handle_file, @ARGV );

sub duration2seconds {
    my ($duration) = @_;

    my %factor = (
        w => 604800,
        d => 86400,
        h => 3600,
        m => 60,
        s => 1,
    );

    my $seconds;

    if ( $duration =~ m/^[0-9]+$/ ) {
        $seconds = $duration;
    } else {
        while ( $duration =~ m/([0-9]+)([smhdw])/g ) {
            $seconds += $1 * $factor{$2};
        }
        die "could not parse duration '$duration'" if !defined $seconds;
    }

    return $seconds;
}

sub emit_help {
    warn <<"END_USAGE";
Usage: fbd [-e epoch|-f file] [options] file [file ..]

Finds files with a date the same as or similar to specified epoch or file.

END_USAGE
    exit 64;
}

sub handle_file {
    return if $_ eq '.' or $_ eq '..';

    # NOTE may need to use $_ or set $dont_use_nlink if File::Find flubs
    # up (at a loss of efficiency over using cached _ form)
    my $file_epoch = ( lstat _ )[$Flag_StatField];

    if ((   defined $max_epoch
            and ( $file_epoch >= $min_epoch and $file_epoch <= $max_epoch )
        )
        or ( $file_epoch == $reference_epoch )
      ) {
        print "$File::Find::name\n";
    }
}
