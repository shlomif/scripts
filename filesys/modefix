#!/usr/bin/env perl
#
# Unix permissions and ownership changer for files and directories (but
# not symbolic links). Run perldoc(1) on this file for additional
# documentation.
#
# NOTE this task may be better managed by configuration management
# software that has a policy of what permissions and ownerships to
# maintain in what directories.

use strict;
use warnings;

use File::Find qw(find);

my (
  $dirmode,   $filemode, $user, $userid, $group,  $groupid,
  %badgroups, %badperms, $skip, $prune,  $parent, @Stat_Buf,
);

my $quiet     = 0;
my $recursive = 1;
my $report    = 0;
my $verbose   = 0;

use Getopt::Std qw(getopts);
my %opts;
getopts( '0h?p:s:d:f:u:g:Grvql', \%opts );

print_help() if exists $opts{h} || exists $opts{'?'};

unless ( exists $opts{u}
  or exists $opts{g}
  or exists $opts{f}
  or exists $opts{d} ) {
  warn "Error: no action flag(s) specified\n";
  exit 64;
}
if ( exists $opts{G} and !exists $opts{u} ) {
  warn "Error: the -G flag requires -u\n";
  exit 64;
}

$verbose = 1 if exists $opts{v};
$report  = 1 if exists $opts{r};
if ( exists $opts{q} ) {
  $verbose = 0;
  $report  = 0;
  $quiet   = 1;
}

$recursive = 0 if exists $opts{l};

$skip  = $opts{s} if exists $opts{s};
$prune = $opts{p} if exists $opts{p};

if ( exists $opts{d} ) {
  my $temp_dirmode = $opts{d};

  if ( $temp_dirmode =~ m/^\d{3,4}$/ ) {

    # internal number in oct mode for chmod compatibility
    $dirmode = oct $temp_dirmode;

  } else {

    # or an array ref for apply_mode to use
    $dirmode = parse_mode($temp_dirmode);

    die "Error: invalid directory mode $temp_dirmode\n" unless $dirmode;
  }
}

# get file mode to set
if ( exists $opts{f} ) {
  my $temp_filemode = $opts{f};

  if ( $temp_filemode =~ m/^\d{3,4}$/ ) {
    $filemode = oct $temp_filemode;

  } else {
    $filemode = parse_mode($temp_filemode);

    die "Error: invalid file mode $temp_filemode\n" unless $filemode;
  }
}

# user to set
if ( exists $opts{u} ) {
  my $temp_user = $opts{u};

  # check whether user:group notation in use...
  ( $temp_user, $group ) = split /[:.]/, $temp_user, 2;

  # by userid, otherwise attempt by user name
  if ( $temp_user =~ m/^\d+$/ ) {

    # check that this userid exists in passwd file
    unless ( $user = getpwuid $temp_user ) {
      warn 'Warning: unknown userid ', $temp_user, "\n"
        unless $quiet;
    }
    $userid = $temp_user;

  } else {

    # need the userid, regardless; can't pull out in scalar mode
    # as root's 0 id triggers the or die... :)
    ( undef, undef, $userid, $groupid ) = getpwnam $temp_user
      or die 'Error: no such user ', $temp_user, "\n";
    $user = $temp_user;
  }
}

if ( !exists $opts{G} ) {
  unless ( exists $opts{g} || defined $group ) {
    undef $groupid;

  } else {
    my ( $members, $temp_groupid );    # for sanity checking
    my $temp_group;
    $temp_groupid = $groupid if defined $groupid;

    if ( exists $opts{g} || defined $group ) {

      # if group already defined, using -u user:group notation,
      # ignore the -g option!
      if ( defined $group ) {
        $temp_group = $group;
      } else {
        $temp_group = $opts{g};
      }

      # by groupid, otherwise attempt by group name
      if ( $temp_group =~ m/^\d+$/ ) {
        unless ( ( $group, undef, $groupid, $members ) =
          getgrgid $temp_group ) {

          # hmmm, at least Linux doesn't appear to allow me to
          # set the gid to a non-existent group number in perl...
          die 'Error: unknown groupid ', $temp_group, "\n";
        }
      } else {

        # extract more info on the group they gave us
        ( $group, undef, $groupid, $members ) = getgrnam $temp_group
          or die 'Error: no such group ', $temp_group, "\n";
      }

      # some user/group sanity checking: check whether user is a member
      # of the group in question
      if ( ( defined $temp_groupid && $temp_groupid != $groupid )
        && exists $opts{u}
        && defined $members ) {

        # username had better appear as a word in $members...
        unless ( $members =~ m/\b$user\b/o ) {
          warn "Warning: $user not member of group $group \n"
            unless $quiet || $userid == 0;
        }
      }
    }
  }
}

shift @ARGV if @ARGV == 1 and $ARGV[0] eq '-';
if (@ARGV) {
  handle_file() for @ARGV;
} else {
  $/ = "\0" if exists $opts{'0'};
  while (readline *STDIN) {
    chomp unless exists $opts{'0'};
    handle_file();
  }
}

sub handle_file {
  @Stat_Buf = lstat;

  if ( !-e _ ) {
    warn "Warning: skipping non-existent file: $_\n";
    return;
  }

  if ( -d _ and $recursive ) {
    $parent = $_;
    find( { wanted => \&zapit, no_chdir => 1 }, $parent );
  } else {
    zapit();
  }
}

if ($report) {

  # report on who was a bad user (e.g. is setting the wrong group)
  # keys are the uids of bad users
  if ( keys %badgroups > 0 && !$quiet ) {
    print "Users owning files with improper groups:\n";
    for ( keys %badgroups ) {
      my ( $name, $uid, $gid, $gcos, $dir ) =
        ( getpwuid $_ )[ 0, 2, 3, 6, 7 ];

      print '  ', $name, ':', $_, ':', $gid, ':', $gcos, ':', $dir, "\t",
        $badgroups{$_}, "\n";
    }
    print "\n";
  }

  # and same for the permissions on files
  if ( keys %badperms > 0 && !$quiet ) {
    print "Users owning files with improper permissions:\n";
    for ( keys %badperms ) {
      my ( $name, $uid, $gid, $gcos, $dir ) =
        ( getpwuid $_ )[ 0, 2, 3, 6, 7 ];

      print '  ', $name, ':', $_, ':', $gid, ':', $gcos, ':', $dir, "\t",
        $badperms{$_}, "\n";
    }
    print "\n";
  }
}

# File::Find subroutine that gets called for each file
sub zapit {
  @Stat_Buf = lstat unless @Stat_Buf;
  my ( $cur_mode, $cur_uid, $cur_gid ) = @Stat_Buf[ 2, 4, 5 ];

  # remove type from mode, leaving permission
  $cur_mode = $cur_mode & 07777;

  # deal with directories
  if ( -d _ ) {

    # see if we should "prune" this directory first
    if ( defined $prune ) {
      my $result = eval "return 1 if (" . $prune . ");";

      if ($@) {
        chomp $@;
        die "Error: prune eval failure: ", $@;    # croak on errors
      }

      if ($result) {
        $File::Find::prune = 1;
        warn "Pruned: ", $_, "\n" if $verbose;
        return;
      }
    }

    # or whether simply "skipped" over
    if ( defined $skip ) {
      my $result = eval "return 1 if (" . $skip . ");";

      if ($@) {
        chomp $@;
        die "Error: skip eval failure: ", $@;    # croak on errors
      }

      if ($result) {
        warn "Skipped: ", $_, "\n" if $verbose;
        return;
      }
    }

    # apply mode changes as needed to directory
    if ( defined $dirmode ) {
      my $new_mode;

      # if ARRAY, do the funky stuff, assume regular octal otherwise
      if ( ref $dirmode eq 'ARRAY' ) {
        $new_mode = apply_mode( $cur_mode, $dirmode );
      } else {
        $new_mode = $dirmode;
      }

      # this next bit could be subroutined w/ the filemode change
      # code below being identical...
      if ( $new_mode != $cur_mode ) {

        # show the offending file if verbose on
        print 'Old mode: ', sprintf( "%04o", $cur_mode ), "\t", $_, "\n"
          if $verbose;

        # attempt the change
        my $result = chmod $new_mode, $_;
        warn "Warning: chmod failure on: ", $_, "\n"
          if $result == 0;

        # log bad permissions
        $badperms{$cur_uid}++ if $report;
      }
    }

  } elsif ( -f _ ) {

    # see whether to skip this file
    if ( defined $skip ) {
      my $result = eval "return 1 if (" . $skip . ");";

      if ($@) {
        chomp $@;
        die "Error: skip eval failure: ", $@;    # croak on errors
      }

      if ($result) {
        warn "Skipped: ", $_, "\n" if $verbose;
        return;
      }
    }

    # set file modes if needed
    if ( defined $filemode ) {
      my $new_mode;

      # if ARRAY, do the funky stuff, assume regular octal otherwise
      if ( ref $filemode eq 'ARRAY' ) {
        $new_mode = apply_mode( $cur_mode, $filemode );
      } else {
        $new_mode = $filemode;
      }

      # only perform the chmod if modes are different...
      if ( $new_mode != $cur_mode ) {

        # show the offending file if verbose on
        print 'Old mode: ', sprintf( "%04o", $cur_mode ), "\t", $_, "\n"
          if $verbose;

        my $result = chmod $new_mode, $_;

        warn "Warning: chmod failure on: ", $_, "\n"
          if $result == 0;

        # log bad permissions
        $badperms{$cur_uid}++ if $report;
      }
    }
  } elsif ( -l _ ) {
    # NOTE: links are not supported; 4.4BSD symbolic links do not have
    #       modes, while those from SysV do (per the OpenBSD
    #       src/bin/chmod/chmod.c comments for the 'h' flag). Supporting
    #       SysV would likely require XS or similar to use the
    #       presumably different flavor of chmod(2) that influences the
    #       mode of symlinks.
    #
    # That being said, anything that is under the $parent directory
    # should otherwise be found by recursion, and anything outside of
    # that tree should not be found, under the principal of least
    # surprise.
  } else {
    warn "Notice: unsupported file type for chmod: $_\n";
  }

  # same user/group-changing code for both dirs and files here
  if ( ( defined $groupid && $groupid != $cur_gid )
    || ( defined $userid && $userid != $cur_uid ) ) {

    # set what to change what to, depending :)
    # || alternation doesn't work as 0 (root's id) fails test!
    my $uid_temp = ( defined $userid )  ? $userid  : $cur_uid;
    my $gid_temp = ( defined $groupid ) ? $groupid : $cur_gid;

    # yak if verbose
    print 'Old UID GID: ', $cur_uid, "\t", $cur_gid, "\t", $_, "\n"
      if $verbose;

    my $result = chown $uid_temp, $gid_temp, $_;
    warn "Warning: chown failure on: ", $_, "\n" if $result == 0;

    # log this change so we know whose been setting bad groups
    $badgroups{$cur_uid}++ if defined $groupid && $report;
  }

  @Stat_Buf = ();
}

# parse_mode takes incoming ug+rw,o-rwx requests and returns
# an array reference suitable for use in apply_mode().
#
# the array for ug+rw,o-rwx should look like ([1,0660],[0,0007])
#                                                sugo
#
# the first element of the internal anon array is whether to add or
# remove the permission, the second is an octal number representing
# which bits to operate on
sub parse_mode {
  my $temp_mode = shift;

  return unless $temp_mode =~ m/^[augorwxs,+-]+$/;

  my ( @modes, $bitmask, $value, $sticky, $mode );

  for ( split ',', $temp_mode ) {
    my ( $what, $operator, $flags ) = split /([+-])/, $_, 2;

    return unless $operator and $flags;

    $mode    = 1;             # whether adding or subtracting bits
    $bitmask = 0000;          # default bits to operate on
    $value   = $sticky = 0;

    $what = 'ugo' if $what eq 'a' or $what eq q{};

    $value += 4 if $flags =~ /r/;
    $value += 2 if $flags =~ /w/;
    $value += 1 if $flags =~ /x/;

    if ( $what =~ /u/ ) {
      $bitmask |= oct "0${value}00";
      $sticky += 4 if $flags =~ /s/;
    }
    if ( $what =~ /g/ ) {
      $bitmask |= oct "00${value}0";
      $sticky += 2 if $flags =~ /s/;
    }
    if ( $what =~ /o/ ) {
      $bitmask |= oct "000${value}";
      $sticky += 1 if $flags =~ /s/;
    }

    # apply sticky mode to finish off this bitmask
    $bitmask |= oct "${sticky}000";

    # test for remove bit, otherwise assume add bit
    $mode = 0 if $operator eq "-";

    push @modes, [ $mode, $bitmask ];
  }

  return \@modes;
}

# expects file's current mode and a parse_mode array reference
# returns the mode the file should be changed to
#
# see parse_mode for the format of the modes array
sub apply_mode {
  my $temp_mode = shift;
  my $r_mode    = shift;

  for ( @{$r_mode} ) {

    # &~ removes bitmask in element from file's permissions,
    # | operator adds bitmask in if necessary
    if ( $_->[0] == 0 ) {
      $temp_mode &= ~$_->[1];
    } else {
      $temp_mode |= $_->[1];
    }
  }

  return $temp_mode;
}

# a standardized help blarb, see perldoc stuff for more meat
sub print_help {
  print <<"END_USAGE";
Usage: modefix [options] [-|file ..]

Unix permissions and ownership changer.

 At least one action flag is required:
  -d nn  Directory mode to set, e.g. '2770' or 'g+rx,o-rwx'
  -f nn  File mode to set,      e.g. '660'  or 'ug+rw'
  -u uu  User name to set,      e.g. 'jdoe' or '42'

  -g gg  Group name to set,     e.g. 'goobers' or '1492'
  -G     Use default group for user given by -u (overrides -g)

 Other options:
  -0     Input on stdin assumed to be "\0" delimited.
  -l     Do no recurse into directories (default is to).
  -q     Quiet mode, overrides verbose and report modes.
  -r     Print a little report summarizing changes.
  -v     Verbose mode.

  -s xx  Perl expression to skip files.
  -p xx  Perl expression to prune directories from search.

Run perldoc(1) on this script for additional documentation.

END_USAGE
  exit 64;
}

END {
  # Report problems when writing to stdout (perldoc perlopentut)
  unless ( close(STDOUT) ) {
    warn "error: problem closing STDOUT: $!\n";
    exit 74;
  }
}

__END__

=head1 NAME

modefix - Unix permissions and ownership changer

=head1 SYNOPSIS

Set permissions and ownership under C</home/jdoe> for user C<jdoe>:

  $ modefix -d 750 -f 640  -u jdoe -G  /home/jdoe

Setup group shared C</cvs/> directory permissions for the C<devel> group:

  $ modefix -g devel -d ug+rw,g+s,o-rwx /cvs

Fine-grained mode fixing (for example where selecting the desired files
would be too annoying to select for via I<-s> or I<-p> option code):

  $ find . ! -perm -o=r -print0 | modefix -0 -l ...

=head1 DESCRIPTION

C<modefix> implements the functionality of chmod(1) and chown(8), and
applies changes in a single filesystem pass. For instance, the
following commands:

  $ find . -type d -print0 | xargs -0 chmod 2750
  $ find . -type f -print0 | xargs -0 chmod 640
  $ find . -print0 | xargs -0 chown john:users

Reduce to a single filesystem pass with C<modefix>:

  $ modefix -d 2750 -f 640 -u jdoe -g users .

=head2 Normal Usage

  $ modefix [options] [-|file ..]

See L<"OPTIONS"> for details on the command line switches supported.

Files to operate on must be listed on the command line, or, failing
that, be passed in on standard input (or, when the single non-option
argument is C<->).

Symbolic links are ignored; changing permissions on the link itself is
not a portable operation.

=head1 OPTIONS

C<modefix> accepts a variety of command line options, broken down into
B<Useful Options>, B<Actions>, and B<Search Customization>.

=head2 Useful Options

=over 4

=item B<-h>, B<-?>

Print usage notes and exit.

=item B<-0>

Assume standard input delimited by null character. Handy if being piped
to from C<find -print0> or the like.

=item B<-v>

Verbose mode, shows file permissions and ownerships prior to the changes
being applied.

=item B<-r>

Report mode. Prints list summarizing which users owned files with
improper permissions or ownerships.

=item B<-q>

Quiet mode. Overrides verbose and report modes; only output will be on
chmod or chown failures.

=item B<-l>

Local only; do not recurse into subdirectories.

=back

=head2 Actions

One or more of the following four options is required.

=over 4

=item B<-d> I<mode>

Directory mode to set. See L<"MORE ON MODES"> for details on the syntax
I<mode> accepts.

=item B<-f> I<mode>

File mode to set. See L<"MORE ON MODES"> for details on the syntax
I<mode> accepts.

=item B<-u> I<user>[:I<group>]

User name (or ID) to set. The group name (or GID) may be specified using
the chown(8) C<user:group> or C<user.group> syntax. This will cause the
B<-g> option to be ignored.

Without quiet mode enabled, a warning will be issued should the user not
exist on the system.

=item B<-g> I<group>

Group name (or GID) to set.

Without quiet mode enabled, a warning will be issued should the group
not exist on the system, or if the B<-u> user is not a member of the
specified group.

=item B<-G>

Set group to the user's default group from the system account database.
Overrides the B<-g> option.

  $ modefix -G -u jdoe /home/jdoe

=back

=head2 Search Customization

Options exist to supply perl fragments to test whether a particular file
should be skipped or pruned:

=over 4

=item B<-s> I<expression>

Perl expression that will result in the current item (stored in $_)
being skipped if the expression turns out to be true. Example:

  -s '-d || m/^\.rsrc$/'

Would skip applying the changes to any files named C<.rsrc>. Note that
skip only counts towards whether or not any actions are performed;
C<modefix> will still recurse into skipped directories.

C<@Stat_Buf> should contain the stat information for the file, and
cached file tests against C<_> should be possible.

=item B<-p> I<expression>

Perl expression that will result in the current directory (stored in $_)
and anything below that directory being pruned from the search.

For example, one can easily prune out all directories lower than the one
supplied as an argument by using the special C<$parent> variable to
check against the current directory; essentially, this turns off the
default recursive behavior of File::Find:

  -p '$parent ne $_'

C<@Stat_Buf> should contain the stat information for the directory, and
cached file tests against C<_> should be possible.

=back

=head1 MORE ON MODES

The B<-f> and B<-d> command line switches support numeric modes:

  0750  (optional sticky bit, user bit, group bit, other bit)

Or can take an interpreted expression of arbitrary length and
complexity:

  ug+rw,o-rw,o+s

The various modes recognized are:

  u  user bit
  g  group bit
  o  other bit
  a  all bits

C<a> is shorthand for C<ugo>, and may be omitted from the expression.
The following are equivalent:

  ugo+rw
  a+rw
  +rw

There are only two operators:

  +  add following to mode
  -  remove following from mode

And four different flags:

  x  execute bit (1)
  r  read bit    (2)
  w  write bit   (4)
  s  set sticky bit, based on mode in expression.

The sticky bit act as follows:

  u+s  set the suid flag
  g+s  set the sgid flag (required for shared directories on some OS)
  o+s  set the chmod(1) 't' flag, like on /tmp

See chmod(1) for background on these arguments.

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://github.com/thrig/sial.org-scripts/tree/master

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head1 SEE ALSO

chmod(1), chown(1), File::Find, find(1), perl(1), xargs(1)

=head1 AUTHOR

thrig - Jeremy Mates (cpan:JMATES) C<< <jmates at cpan.org> >>

=head1 COPYRIGHT

Copyright (c) 2015 Jeremy Mates

     Permission to use, copy, modify, and/or distribute this software for
     any purpose with or without fee is hereby granted, provided that the
     above copyright notice and this permission notice appear in all
     copies.

     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
     OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
     PERFORMANCE OF THIS SOFTWARE.

=head1 SCRIPT CATEGORIES

UNIX/System_administration

=cut
