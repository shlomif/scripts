#!/usr/bin/env perl
#
# Alters file names according to Perl expressions, with various other
# options available. This program is free software; you can redistribute
# it and/or modify it under the same terms as Perl itself.

use strict;
use warnings;
use File::Basename qw(dirname);
use File::Copy       ();
use File::Path::Tiny ();
use File::Spec       ();
use Getopt::Long qw(GetOptions);

Getopt::Long::Configure("bundling");
GetOptions(
    '0'           => \my $Flag_Null,
    'copy|c'      => \my $Flag_Copy,
    'dry-run|n|p' => \my $Flag_Dry_Run,
    'help|h|?'    => \&emit_help,
    'mkdir|M'     => \my $Flag_Mkdir,
    'move|m'      => \my $Flag_Move,
    'verbose|v'   => \my $Flag_Verbose,
) or exit 65;

if ( $Flag_Copy and $Flag_Move ) {
    warn "rename: cannot both copy and move a file\n";
    emit_help();
}

my $how     = \&CORE::rename;
my $how_str = 'rename';
if ($Flag_Copy) {
    $how     = \&File::Copy::copy;
    $how_str = 'copy';
} elsif ($Flag_Move) {
    $how     = \&File::Copy::move;
    $how_str = 'move';
}

my $expr = shift || emit_help();

my $exit_status = 0;

if ( !@ARGV or ( @ARGV == 1 and $ARGV[0] eq '-' ) ) {
    local $/ = "\0" if $Flag_Null;
    while ( readline *STDIN ) {
        chomp;
        handle_file();
    }
} else {
    handle_file() for @ARGV;
}

exit $exit_status;

sub emit_help {
    warn <<"END_USAGE";
Usage: rename [options] perl-expression [file ..]|-

Alters file names according to Perl expressions.

  -0     Assume input on stdin null delimited.
  -c     Copy instead of rename.
  -M     Make directories if necessary.
  -m     Move instead of rename.
  -n/-p  Dry run (preview changes only).
  -v     Be verbose.

END_USAGE
    exit 64;
}

sub handle_file {
    # loosen things up to ease off-the-cuff code on command line a.k.a.
    # more than enough rope...
    no strict;
    no warnings;

    if ( !-e ) {
        warn "rename: skipping '$_' as does not exist\n"
          if $Flag_Verbose;
        $exit_status = 2;
        return;
    }

    my $origfile = $_;

    eval $expr;
    die "rename: unable to eval expression: $@\n" if $@;

    return if File::Spec->rel2abs($origfile) eq File::Spec->rel2abs($_);

    print "$how_str $origfile $_\n"
      if $Flag_Dry_Run
      or $Flag_Verbose;

    return if $Flag_Dry_Run;

    if ( $how_str eq 'copy' and !-f $origfile ) {
        # since File::Copy doesn't know what to do with directories
        # (there is a File::Copy::Recursive module...)
        warn "rename: will not copy non-file '$origfile'\n";
        $exit_status = 3;
        return;
    }

    if ($Flag_Mkdir) {
        my $output_dir = dirname($_);
        File::Path::Tiny::mk($output_dir)
          or die "rename: could not create path '$output_dir': $!\n";
    }

    unless ( $how->( $origfile, $_ ) ) {
        warn "rename: could not $how '$origfile' to '$_': $!\n";
        $exit_status = 4;
    }
}
