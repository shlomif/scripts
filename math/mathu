#!/usr/bin/env perl
#
# Performs various mathematical and statistical operations on input
# data. (Also known as me being too lazy to use R, or for when I want
# something quick to mess about with on the CLI, since I am terrible at
# doing math in my head.) Not for any sort of unattended or non-
# interactive use, due to lack of input sanity checking, etc.

use 5.10.0;
use Math::BigInt;
use Math::Trig;
use Getopt::Std;
use List::Util qw(max sum);
use Scalar::Util qw(looks_like_number);

my $PHI = 1.6180339887498948482;

# how to format output numbers with printf
my $format = '%.2f';

# width for binary stuff
my $width = 32;

my %ability = (
    basic   => { handle => \&handle_basic, },
    bisect  => { handle => \&handle_bisect, },
    C       => { handle => \&handle_C, },
    c2f     => { handle => \&handle_c2f, },
    dec2bin => { handle => \&handle_dec2bin, },
    deg2rad => {
        handle => sub { printf "$format\n", deg2rad( shift @ARGV ) }
    },
    derivative  => { handle => \&handle_derivative, },
    dist        => { handle => \&handle_distribution, },
    divisibleby => { handle => \&handle_divisibleby, },
    dtv         => { handle => \&handle_dtv, },
    empirical   => { handle => \&handle_empirical, },
    expo        => { handle => \&handle_expo, },
    f2c         => { handle => \&handle_f2c, },
    golden      => { handle => \&handle_golden, },
    max         => { handle => \&handle_max, },
    mean        => { handle => \&handle_mean, },
    min         => { handle => \&handle_min, },
    percent     => { handle => \&handle_percent, },
    polyfactor  => { handle => \&handle_polyfactor, },
    rad2deg     => {
        handle => sub {
            printf "$format\n", rad2deg( shift @ARGV );
        }
    },
    range  => { handle => \&handle_range, },
    ratio  => { handle => \&handle_ratio, },
    sdev   => { handle => \&handle_sdev, },
    slope  => { handle => \&handle_slope, },
    sum    => { handle => \&handle_sum, },
    zscore => { handle => \&handle_zscore, },
);

# parse command-line options
my %opts;
getopts( 'lf:w:', \%opts );

# lists abilities, good for tab completion systems to query
if ( exists $opts{l} ) {
    print join( " ", sort keys %ability ), "\n";
    exit 1;
}

my $action = shift;
die "error: no such action: $action\n" unless exists $ability{$action};

$format = $opts{f} if exists $opts{f};
$width  = $opts{w} if exists $opts{w};

$ability{$action}->{handle}->();

exit 0;

##############################################################################
#
# SUBROUTINES

sub do_dist {
    my $array = shift;
    my $bref  = shift;

    die "not enough buckets\n" unless @$bref > 1;

    # TODO support for different output modes (counts, literal
    # values in each bucket, percents of total)
    my $i     = 0;
    my $count = 0;
    for my $v (@$array) {

        # print "CUR: ", $v, " at $j and ", $bref->[$i], "\n";
        if ( $v > $bref->[$i] ) {
            dist_print( $bref->[$i], $count );
            $count = 0;
            $i++;
            while ( $v > $bref->[$i] ) {

                #print "EMPTY: ", $v, " at $j and ", $bref->[$i], "\n";
                dist_print( $bref->[$i], $count );
                $i++;
            }
        }
        $count++;
    }
    dist_print( $bref->[$i], $count );
}

sub dist_print {
    my $bucket = shift;
    my $count  = shift;

    $bucket =~ s/\.\d+//;
    print "$bucket $count\n";
}

sub factorial {
    my $x = Math::BigInt->new( $_[0] );
    $x->bfac();
}

sub handle_basic {
    my @array;
    my %results;

    while ( readline *STDIN ) {
        chomp;
        next if $_ eq q{} or !looks_like_number($_);

        $results{sum} += $_;

        $results{min} = $_ unless exists $results{min};
        $results{max} = $_ unless exists $results{max};
        $results{min} = $_ if $_ < $results{min};
        $results{max} = $_ if $_ > $results{max};

        push @array, $_;
    }
    return unless @array;

    $results{count}          = @array;
    $results{mean}           = mean( \@array, $results{sum} );
    $results{range}          = $results{max} - $results{min};
    $results{sdev}           = standard_deviation( \@array, $results{mean} );
    $results{sdev_range_est} = $results{range} / sqrt( $results{count} )
      if $results{count} < 15;
    $results{ssdev} = sample_standard_deviation( \@array, $results{mean} );

    print map {
        $_ . " "
          . ( $results{$_} =~ /\./ ? numbertidy( $results{$_} ) : $results{$_} ) . "\n"
    } sort keys %results;
}

sub handle_bisect {
    my ( $lo, $hi ) = @ARGV;
    print int( ( $lo + $hi ) / 2 ), "\n";
}

sub handle_C {
    my ( $n, $r ) = @ARGV;

    die "Usage: mathu C n r (where n>=r)\n" if $n < $r;

    printf "%d\n", factorial($n) / ( factorial($r) * factorial( $n - $r ) );
}

# because can never spel things right for units(1) and using the web is too
# annoying and slow
sub handle_c2f {
    my ($c) = @ARGV;
    printf "$format\n", 9 / 5 * $c + 32;
}

sub handle_dec2bin {
    chomp( @ARGV = readline *STDIN ) unless @ARGV;
    for my $dec (@ARGV) {
        printf "%0*b\n", $width, $dec;
    }
}

# Output (from single-column input) can then be plotted in R via:
#
# > x=read.table("dat")
# > plot(x$V1,type='l',ylim=c(min(x,na.rm=TRUE),max(x,na.rm=TRUE)))
# > lines(x$V2,type='l',col='red',lty=2)
# > lines(x$V3,type='l',col='blue',lty=3)
sub handle_derivative {
    my $deriv_max = 2;
    my @prev_vals;
    my $previous_x = 0;
    my $cols;
    while (readline) {
        chomp;
        my @input = grep looks_like_number $_, split /[\s,]+/, $_;
        if ( @input < 1 || @input > 2 ) {
            die "too little or too much data on $ARGV:$. - '$_'\n";
        }
        $cols //= @input;
        if ( defined $cols and $cols != @input ) {
            die "inconstant column count expected $cols but $ARGV:$. had '$_'\n";
        }
        if ( @input == 1 ) {
            @input[ 0, 1 ] = ( undef, $input[0] );
        }
        my @values;
        push @values, $input[1];
        for my $i ( 1 .. $deriv_max ) {
            if ( defined $prev_vals[ $i - 1 ] ) {
                my $delta_x = defined $input[0] ? $input[0] - $previous_x : 1;
                push @values, ( $values[ $i - 1 ] - $prev_vals[ $i - 1 ] ) / $delta_x;
            } else {
                push @values, 'NA';
            }
        }
        print join( ' ', ( @input == 1 ? () : $input[0] ), @values ), "\n";
        @prev_vals = grep { $_ ne 'NA' } @values;
        $previous_x = $input[0];
    }
}

sub handle_distribution {
    my @array;
    my %results;

    my $way    = shift @ARGV;
    my $output = shift @ARGV;

    while ( readline *STDIN ) {
        chomp;
        next if $_ eq q{};
        $results{min} = $_ unless exists $results{min};
        $results{max} = $_ unless exists $results{max};
        $results{min} = $_ if $_ < $results{min};
        $results{max} = $_ if $_ > $results{max};
        push @array, $_;
    }

    @array = sort { $a <=> $b } @array;

    if ( $way =~ /^b=?(\d*)/ ) {
        my $bucket = $1 || 2;
        $bucket = $#array if $bucket > $#array;
        my $diff     = $results{max} - $results{min};
        my $interval = $diff / $bucket;
        my @buckets  = map { $results{min} + $interval * $_ } 1 .. $bucket;
        do_dist( \@array, \@buckets );

    } elsif ( $way =~ /^d=?(\d[\d:]*)?/ ) {
        my $bucket = $1;
        my @buckets;
        if ( defined $bucket ) {
            my %seen;
            @buckets = sort { $a <=> $b } grep {
                     defined
                  && /^\d+$/
                  && $_ >= $results{min}
                  && $_ <= $results{max}
                  && not $seen{$_}++
            } split /:/, $1;
        }

        unless (@buckets) {
            my $diff = $results{max} - $results{min};
            push @buckets, $results{min} + $diff / 2;
        }

        push @buckets, $results{max} unless $buckets[-1] == $results{max};
        do_dist( \@array, \@buckets );
    } elsif ( $way =~ /^r/ ) {

        # ensure range goes to 1 higher than floating point numbers
        my $max = $results{max};
        $max = 1 + int($max) if $max =~ /\./;
        my @buckets = $results{min} .. $max;

        do_dist( \@array, \@buckets );
    }
}

sub handle_divisibleby {
    my $max_test = int( max(@ARGV) / 2 );
    $max_test = 2 if $max_test < 2;

    my %seen;

    for my $i ( 2 .. $max_test ) {
        my @result = grep { $_ % $i == 0 } @ARGV;
        if ( @result == @ARGV ) {
            print $i, "\n";
        }
    }
}

# delta time value
sub handle_dtv {
    my $prev;
    while ( readline *STDIN ) {
        my $firstcol = (split)[0];
        if ( defined $prev ) {
            printf "$format\n", $firstcol - $prev;
        }
        $prev = $firstcol;
    }
}

sub handle_empirical {
    my ( $mean, $sdev ) = @ARGV;

    print "\n\t\t-1..1 is 68%; -2..2 is 95%; -3..3 is 99.7%\n\n";

    for ( -3 .. 3 ) {
        print $_, "\t", $mean + $_ * $sdev, "\n";
    }
}

# PeRT
sub handle_expo {
    my ( $principal, $rate, $time ) = @ARGV;

    printf "$format\n", $principal * exp( $rate * $time );
}

# because can never spel things right for units(1) and using the web is too
# annoying and slow
sub handle_f2c {
    my ($f) = @ARGV;
    printf "$format\n", 5 / 9 * ( $f - 32 );
}

# Various calculations on a+b for the Golden Ratio
# http://en.wikipedia.org/wiki/Golden_ratio
sub handle_golden {
    my $value = shift @ARGV;

    # Assume value supplied is a+b and calc a, b lengths:
    my $segment_long  = $value / $PHI;
    my $segment_short = $value - $segment_long;

    printf( "if $value is a+b: a=$format,   b=$format\n",
        $segment_long, $segment_short );

    # Assume value supplied is a, calc b, a+b
    $segment_short = $value / $PHI;
    my $line_length = $value + $segment_short;

    printf( "if $value is a:   b=$format, a+b=$format\n",
        $segment_short, $line_length );

    # Assume value supplied is b, calc a, a+b
    $segment_long = $value * $PHI;
    $line_length  = $value + $segment_long;

    printf( "if $value is b:   a=$format, a+b=$format\n",
        $segment_long, $line_length );
}

sub handle_max {
    my $result;
    while ( readline *STDIN ) {
        chomp;
        next if $_ eq q{};
        $result = $_ unless defined $result;
        $result = $_ if $_ > $result;
    }
    $result = numbertidy($result) if $result =~ /\./;
    print $result, "\n";
}

sub handle_mean {
    my @array;
    while ( readline *STDIN ) {
        chomp;
        next if $_ eq q{};
        push @array, $_;
    }
    my $result = mean( \@array );
    $result = numbertidy($result) if $result =~ /\./;
    print $result, "\n";
}

sub handle_min {
    my $result;
    while ( readline *STDIN ) {
        chomp;
        next if $_ eq q{};

        $result = $_ unless defined $result;
        $result = $_ if $_ < $result;
    }
    $result = numbertidy($result) if $result =~ /\./;
    print $result, "\n";
}

sub handle_percent {
    printf "$format%%\n", $ARGV[0] / $ARGV[1] * 100;
}

sub handle_polyfactor {
    my ( $A, $B, $C ) = @ARGV;
    my %seen;

    my $Babs = abs($B);
    if ( abs($C) > $Babs ) {
        $Babs = abs($C);
    }

    for my $f1 ( -$Babs .. $Babs ) {
        my $f2 = $B - $f1;
        next if $seen{ join "", sort { $a <=> $b } $f1, $f2 }++;
        print "$f1 $f2\n" if $f1 + $f2 == $B and $f1 * $f2 == $A * $C;
    }
}

sub handle_range {
    my ( $min, $max );

    while ( readline *STDIN ) {
        chomp;
        next if $_ eq q{} or !looks_like_number($_);

        $min = $_ unless defined $min;
        $min = $_ if $_ < $min;
        $max = $_ unless defined $max;
        $max = $_ if $_ > $max;
    }
    exit 1 unless defined $min;

    printf "$format\n", $max - $min;
}

sub handle_ratio {
    printf "$format\n", $ARGV[0] * $ARGV[1] / $ARGV[2];
}

sub handle_sdev {
    my @array;
    while ( readline *STDIN ) {
        chomp;
        next if $_ eq q{};
        push @array, $_;
    }
    my $result = standard_deviation( \@array, mean( \@array ) );
    $result = numbertidy($result) if $result =~ /\./;
    print $result, "\n";
}

# given two points calculate slope and intercept for y=mx+b
sub handle_slope {
    die "Usage: mathu slope x1,y1 x2,y2\n" if @ARGV != 2;
    my @points;
    for my $p (@ARGV) {
        push @points, [ split ",", $p ];
    }
    my $slope =
      ( $points[1][1] - $points[0][1] ) / ( $points[1][0] - $points[0][0] );
    my $intercept = $points[1][1] - $slope * $points[1][0];
    print "m=$slope\nb=$intercept\n";
}

sub handle_sum {
    my $result;
    while ( readline *STDIN ) {
        chomp;
        next if $_ eq q{};
        $result += $_;
    }
    $result = numbertidy($result) if $result =~ /\./;
    print $result, "\n";
}

sub handle_zscore {
    my ( $mean, $sdev, $score ) = @ARGV;
    die "mean sdev score\n" unless @ARGV == 3;
    printf "%.03f\n", ( $score - $mean ) / $sdev;
}

# $mean = mean(\@array) computes the mean of an array of numbers.
sub mean {
    my $arrayref  = shift;
    my $sum       = shift;
    my $is_sample = shift // 0;
    my $n         = @$arrayref;
    $n-- if $is_sample;
    unless ($sum) {
        for (@$arrayref) { $sum += $_ }
    }
    return $sum / $n;
}

sub numbertidy {
    my @tidyied = map {
        $_ = sprintf "$format", $_;
        s/0+$//;
        $_;
    } @_;

    return wantarray ? @tidyied : $tidyied[0];
}

sub sample_standard_deviation {
    my $arrayref = shift;
    my $mean     = shift;

    return sqrt( mean( [ map ( ( $_ - $mean )**2, @$arrayref ) ], undef, 1 ) );
}

# $sd = standard_deviation_data(\@array) computes the standard
# deviation of an array of numbers.
sub standard_deviation {
    my $arrayref = shift;
    my $mean     = shift;

    return sqrt( mean( [ map ( ( $_ - $mean )**2, @$arrayref ) ] ) );
}

END {
    # Report problems when writing to stdout (perldoc perlopentut)
    unless ( close(STDOUT) ) {
        warn "error: problem closing STDOUT: $!\n";
        exit 74;
    }
}
