#!/bin/sh
#
# Wrapper to do CVS "update" or equivalent on working directories as
# appropriate. Add -f "force" argument to do `cvs up -Ad` or equivalent.
# Requires that `findup` is available.

EXIT_STATUS=0

update_cvs () {
    CVSUPARGS=
    if [ "is$FORCE" = "isyes" ]; then
        CVSUPARGS=-Ad
    fi
    cvs -q update "$CVSUPARGS"
    STATUS=$?
    if [ "$STATUS" -ne 0 ]; then
        echo >&2 "ketchup: non-zero exit $STATUS from cvs update in $CURRENT_DIR"
        EXIT_STATUS=$STATUS
    fi
}

update_git () {
    COMMAND=
    # NOTE this is a standard area that all not-my-projects get
    # dumped into; changes are (generally) not made to them, so a
    # pull makes sense.
    if echo "$CURRENT_DIR" | grep third-party >/dev/null; then
        COMMAND="git pull"
    else
        COMMAND="git status -sb"
    fi

    $COMMAND
    STATUS=$?
    if [ "$STATUS" -ne 0 ]; then
        echo >&2 "ketchup: non-zero exit $STATUS from $COMMAND in $CURRENT_DIR"
        EXIT_STATUS=$STATUS
    fi
}

check_dir () {
    findup -H -q .git
    STATUS=$?
    if [ "$STATUS" -eq 0 ]; then
        update_git
        return
    fi

    if [ -f CVS/Root ]; then
        update_cvs
        return
    fi

    echo >&2 "ketchup: nothing to do in `pwd`"
}

OPT=
FORCE=
while getopts fh OPT; do
    case "$OPT" in
        f)
            FORCE=yes
        ;;
        h)
            echo >&2 "Usage: ketchup [dir]"
            exit 64
        ;;
    esac
done
shift "`expr $OPTIND - 1`"

if [ "$#" -eq 0 ]; then
    check_dir
else
    for input in "$@"; do
        if [ -d "$input" ]; then
            ( cd -- "$input" && check_dir )
        fi
    done
fi

exit "$EXIT_STATUS"
