#!/usr/bin/env perl
#
# Replays logs with simulated delays.

use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use Time::HiRes qw(sleep);

my $previous_epoch;
my $randomness = -1;

GetOptions(
    'help|h|?'        => \&emit_help,
    'keeptimestamp|k' => \my $Flag_Keep_Timestamp,
    'mindelay|m=f'    => \my $Flag_Min_Delay,
    'maxdelay|M=f'    => \my $Flag_Max_Delay,
    'speedup|f=f'     => \my $Flag_Speedup,
    'startdelay|s=f'  => \my $Flag_Start_Delay,
    'random|r=f'      => sub {
        $previous_epoch = time();
        $randomness     = $_[1];
    },
) or exit 65;

$Flag_Min_Delay = 0  if !defined $Flag_Min_Delay;
$Flag_Max_Delay = ~0 if !defined $Flag_Max_Delay;

$Flag_Speedup = 1 if !defined $Flag_Speedup or $Flag_Speedup <= 0;

sleep $Flag_Start_Delay if defined $Flag_Start_Delay and $Flag_Start_Delay > 0;

# unbuffer STDOUT regardless of where it is going (see setbuf(3) for the
# underlying details of buffering on unix). Less efficient, but more
# suitable to the needs of timing specific log replay.
$| = 1;

shift @ARGV if @ARGV == 1 and $ARGV[0] eq '-';
while (readline) {
    my ($epoch) = $_ =~ m/^([^ ]+) /;
    s/// if !$Flag_Keep_Timestamp;

    # assume that lines without a timestamp belong to some sort of
    # multiline logspam (e.g. Java stack vomits); send those through
    # directly to replicate the log experience of such a dump
    next if !defined $epoch or $epoch !~ m/^(?:[0-9]+\.?|\.[0-9])[0-9]*$/;

    $epoch = $previous_epoch + rand $randomness if $randomness > 0;

    if ( defined $previous_epoch ) {
        my $delay = $epoch - $previous_epoch;

        # KLUGE around a negative delta: daylight savings time wobble?
        # Logs with different timezones in the input? ntpdate(8) or
        # time(1) yanking time to new value? Virt clock skew? Mmm pie.
        if ( $delay < 0 ) {
            $delay = rand 3.14;
            undef $epoch;
        }

        $delay /= $Flag_Speedup;
        $delay = $Flag_Min_Delay if $delay < $Flag_Min_Delay;
        $delay = $Flag_Max_Delay if $delay > $Flag_Max_Delay;

        sleep $delay;
    }

    $previous_epoch = $epoch;

} continue {
    print;
}

sub emit_help {
    warn <<"END_USAGE";
Usage: replay-log [options] [files|-]

Replays logs with simulated delays.

END_USAGE
    exit 64;
}
