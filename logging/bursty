#!/usr/bin/env perl
#
# Detects bursts or clumps in date-tagged data.

use 5.16.0;
use strict;
use warnings;
use Getopt::Long qw(GetOptions);

########################################################################
#
# KNOBS

# Data gap detection optimization, resets collection of input if new
# value exceeds this delta from the previous. Set to zero or below to
# disable.
my $Interval_Threshold = 5;

# How many lines to consider when doing stats. Probably should be kept
# small, though not too small.
my $Buf_Size = 5;

# Variance below which entries will be reported on (variance is used to
# avoid a sqrt() call on such to obtain the standard deviation).
my $Variance_Threshold = 25;

# Z squared threshold for individual lines (means to exclude outliers if
# $Interval_Threshold has been set large enough to let such through).
my $Z_Sq_Threshold = 25;

GetOptions(
    "ithresh=f" => \$Interval_Threshold,
    "bufsize=i" => \$Buf_Size,
    "help|h|?"  => \&emit_help,
    "stats"     => \my $Flag_Stats,
    "verbose|v" => \my $Flag_Verbose,
    "Vthresh=f" => \$Variance_Threshold,
    "Zthresh=f" => \$Z_Sq_Threshold,
) or exit 65;

die "bursty: bufsize value '$Buf_Size' is too small\n" if $Buf_Size < 3;

if ($Flag_Stats) {
    $Flag_Verbose       = 1;
    $Interval_Threshold = 0;
    $Variance_Threshold = 0;
    $Z_Sq_Threshold     = 0;
}

$Variance_Threshold = ~0 if $Variance_Threshold == 0;
$Z_Sq_Threshold     = ~0 if $Z_Sq_Threshold == 0;

########################################################################
#
# MAIN

# for moving average over the input
my $Current_Sum = 0;

# LoL, entries consist of [0] epoch [1] rest of line (and sometimes [2]
# for variance)
my @Buffer;

# necessary to track what lines have been printed already (though very
# fiddly and perhaps buggy)
my $Line_Idx  = 0;
my $Print_Idx = -1;

shift @ARGV if @ARGV == 1 and $ARGV[0] eq '-';

LINE: while (readline) {
    chomp;
    my ( $epoch, $rest ) = split ' ', $_, 2;

    die "bursty: not a non-negative number '$epoch' at $ARGV:$.\n"
      if $epoch !~ m/^(?:[0-9]+\.?|\.[0-9])[0-9]*$/;
    $rest //= '';

    # Here one could filter out false positives, local networks,
    # anything that should not be considered and might hide the signal
    # being looked for. This could also be done to the data prior to it
    # being passed...
    #next if $rest eq ...

    push @Buffer, [ $epoch, $rest ];
    $Current_Sum += $epoch;

    if ( @Buffer == $Buf_Size ) {
        # Optimization: if the most recent value is nowhere near the
        # previous one, toss out all the previous data points. This
        # skips the stats calcs across gaps of the said interval in the
        # input data. (Though will mean that N < $Buf_Size clumps in
        # the log will be ignored if they are followed by a suitable
        # gap. However, disabling this flag will mean that some
        # outliers may be printed with the clumps, unless the z_sq
        # filter excludes these.)
        if ( $Interval_Threshold > 0
            and abs( $Buffer[-1][0] - $Buffer[-2][0] ) > $Interval_Threshold ) {
            $Current_Sum = $Buffer[-1][0];
            splice @Buffer, 0, $#Buffer;
            $Line_Idx  = 0;
            $Print_Idx = -1;
            next LINE;
        }

        my $mean = $Current_Sum / $Buf_Size;
        my $vsum = 0;
        for my $bval (@Buffer) {
            $vsum += $bval->[2] = ( $bval->[0] - $mean )**2;
        }
        my $variance = $vsum / $Buf_Size;

        if ( $variance <= $Variance_Threshold ) {
            my $range = $Line_Idx - $Print_Idx - 1;
            $range = $#Buffer if $range > $#Buffer;
            for my $bval ( @Buffer[ ( $#Buffer - $range ) .. $#Buffer ] ) {
                my $z_sq = ( $variance != 0 ) ? ( $bval->[2] - $variance )**2 / $variance : 0;
                if ( $z_sq < $Z_Sq_Threshold ) {
                    printf "m=%.2f v=%.2f zsq=%.2f ", $mean, $variance, $z_sq if $Flag_Verbose;
                    print "$bval->[0] $bval->[1]\n";
                }
            }
            $Line_Idx = $Print_Idx;
        }
        $Current_Sum -= ( shift @Buffer )->[0];
    }
} continue {
    $Line_Idx++;
}

sub emit_help {
    warn <<"END_USAGE";
Usage: bursty [options] [file|-]

Detects bursts or clumps in date-tagged data.

END_USAGE
    exit 64;
}
