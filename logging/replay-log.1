.Dd January  6 2017
.Dt REPLAY-LOG 1
.nh
.Os
.Sh NAME
.Nm replay-log
.Nd replays logs with simulated delays
.Sh SYNOPSIS
.Nm
.Bk -words
.Op Cm --keeptimestamp
.Op Cm --mindelay= Ns num
.Op Cm --maxdelay= Ns num
.Op Cm --speedup= Ns num
.Op Cm --startdelay= Ns num
.Op Cm --random= Ns num
.Op Ar files|-
.Ek
.Sh DESCRIPTION
.Nm
replays logs with simulated delays taken from the epoch time in the
first field of the input lines or by random chance.
Options:
.Bl -tag -width Ds
.It Cm --keeptimestamp Op Fl k
Do not strip the timestamp from the log lines.
.It Cm --mindelay= Ns num Op Fl m Ar num
Minimum delay between log lines in seconds.
.It Cm --maxdelay= Ns num Op Fl M Ar num
Maximum delay between log lines in seconds.
.It Cm --speedup= Ns num Op Fl f Ar num
A factor that increases (or if fractional decreases) the speed of
playback by that amount.
.It Cm --startdelay= Ns num Op Fl s Ar num
A delay in seconds to wait at startup prior to reading the first log line.
.It Cm --random= Ns num Op Fl r Ar num
Instead of the log epoch, sleeps instead for a random roll of seconds
from zero to just less than the number provided.
.El
.Sh EXIT STATUS
.Ex -std replay-log
.Sh EXAMPLES
Some means to convert log timestamps to epoch may be necessary,
such as via
.Xr epochal 1 .
.Pp
.Dl $ Ic epochal -y -f '%b %d %H:%M:%S' /path/to/syslog \&| replay-log
.Pp
Otherwise, one use for this script is to test existing logs against
log scanning rules for, say, the
.Pa sec.pl
utility.
.Pp
.Dl $ Ic mkfifo logfile
.Dl $ Ic fgrep sshd /var/log/messages \e
.Dl \& \&  Ic \&| epochal -l -yf '%b %d %H:%M:%S' -o '%s %b %d %H:%M:%S' \e
.Dl \& \&  Ic \&| replay-log -s 10 >> logfile &
.Dl $ Ic sec.pl --conf=sshd.conf --input=logfile
.Pp
The
.Xr epochal 1
time dance is required to prefix an epoch to the beginning of the log
lines while also preserving the existing timestamp that the
.Xr sec.pl 1
may expect to see.
.Sh SEE ALSO
.Xr epochal 1 ,
.Xr sec.pl 1 ,
.Xr setbuf 3
.Sh AUTHOR
.An Jeremy Mates
