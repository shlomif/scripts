#!/usr/bin/env perl
#
# Tails a file and applies Perl expressions to that output. Run
# perldoc(1) on this file for additional documentation.

# disabled to allow more flexible expression composition
#use strict;

use Carp;
use File::Tail;
use Getopt::Std;

END {
  # Report problems when writing to stdout (perldoc perlopentut)
  unless ( close(STDOUT) ) {
    warn "error: problem closing STDOUT: $!\n";
    exit 74;
  }
}

my ( %opts, $filename, $file );

# various File::Tail object preferences.  listen much faster than default
# to emulate tail(1) at expense of more busy wait.
my $maxinterval = 2;
my $interval    = 1;
my $adjustafter = 1;
my $tail        = 0;
my $reset_tail  = 0;

# default to just printing input
my $expression = "print";

# commands to be executed before entering the loop
my $preop = "";

# parse command-line options
getopts( 'Sa:h?i:m:p:r:t:', \%opts );

help() if exists $opts{h} or exists $opts{'?'} or not @ARGV;

$maxinterval = $opts{m} if exists $opts{m} and $opts{m} =~ /^\d+$/;
$interval    = $opts{i} if exists $opts{i} and $opts{i} =~ /^\d+$/;
$adjustafter = $opts{a} if exists $opts{a} and $opts{a} =~ /^\d+$/;
$tail        = $opts{t} if exists $opts{t} and $opts{t} =~ /^-?\d+$/;
$reset_tail  = $opts{r} if exists $opts{r} and $opts{r} =~ /^-?\d+$/;

$preop = $opts{p} if exists $opts{p};

# filename to tail on and perl expression to apply to each line
$filename = shift;
$expression = "@ARGV" if @ARGV;

# don't buffer STDOUT soas to interoperate with tee(1) properly
$| = 1;

# handle anything that needs to be done first
eval $preop;
die 'Preop failed: ', $@, if $@;

# KLUGE read from standard input for filename of -
if ( $filename eq '-' ) {
  while (readline *STDIN) {
    s/([^ -~\t\r\n])/sprintf "%%%%02x", ord($1)/eg if $opts{S};

    eval $expression;
    die 'Expression error: ', $@ if $@;
  }
} else {

  $file = File::Tail->new(
    name        => $filename,
    maxinterval => $maxinterval,
    interval    => $interval,
    adjustafter => $adjustafter,
    tail        => $tail,
    reset_tail  => $reset_tail,
  );

  # loop forever on file; apply supplied expression to each line
  while ( defined( $_ = $file->read ) ) {
    s/([^ -~\t\r\n])/sprintf "%%%%02x", ord($1)/eg if $opts{S};

    eval $expression;
    die 'Expression error: ', $@ if $@;
  }
}

exit;

# a generic help blarb
sub help {
  warn <<"HELP";
Usage: $0 [opts] [file|-] [expression]

Tails a file and applies perl expression to each line.

Options:
  -h/-?   Display this message

  -S      Sanitize input (hex encode anything non-printable).

  -p exp  Code to be executed before entering loop.

  -m sec  Check file for updates this often at most.
  -i sec  Initial sleep period before checking file.
  -a sec  Times to wait until adjusting check interval.

  -t num  Read num lines from file.  Negative is whole file.
  -r num  Lines to read after file reset.

Run perldoc(1) on this script for additional documentation.

HELP
  exit 64;
}

__END__
=head1 NAME

ptail - tails a file and applies a perl expression to each line

=head1 SYNOPSIS

Follow a logfile, and print any lines mentioning ipmon:

  $ ptail /var/log/messages 'print if m/ipmon/'

See L<"EXAMPLES"> for more ideas.

=head1 DESCRIPTION

=head2 Overview

This script is the functional equivalent of the tail(1) utility
running in follow mode, with the additional ability to apply an
arbitrary perl expression to each line seen in the file being tracked.

The primary use seen for this script is to extract out and manipulate
specific lines of interest from a busy logfile.

=head2 Normal Usage

  $ ptail [options] [file|-] [expression]

See L<"OPTIONS"> for details on the command line switches supported.

The file to watch is required, and the expression defaults to "print"
to emulate the behavior of a C<tail -f>.  The expression is built
from any number of arguments following the file, for greater
flexibility.  $_ is used to store each line in turn.

To read from standard input instead of a file, use C<-> in place of
a filename.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=item B<-S>

Sanitize input (hex encode anything non-printable).

=item B<-p> I<expression>

Perl expression to be executed before entering the loop on the file.
Use to perform any initial one-time operations one might need.

=item B<-m> I<seconds> (maxinterval)

Check file for updates this often at most.

=item B<-i> I<seconds> (interval)

Initial sleep period before checking file.

=item B<-a> I<seconds> (adjustafter)

Times to wait until adjusting check interval.

=item B<-t> I<number> (tail)

Read num lines from file.  Negative is whole file.

=item B<-r> I<number> (reset_tail)

Lines to read after file reset.

=back

See L<File::Tail> for more information on the parenthesized parameter
names, which are File::Tail parameters passed directly to the object.

=head1 EXAMPLES

Walk through all of C</var/log/messages> before following the file,
printing lines pertaining to dhcpd:

  $ ptail -t -1 /var/log/messages 'print if m/ dhcpd/'

Watch for the ip address 10.0.0.1 in C</var/log/system.log>, trimming
the standard syslog leading information, and saving a copy of the data
to C</tmp/10.log>:

  $ ptail /var/log/system.log 's/^\w{3}\s+\d+ [\d:]+ \w+ //; \
      print if m/\Q10.0.0.1\E/' | tee /tmp/10.log

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://github.com/thrig/sial.org-scripts/tree/master

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known bugs.

=head1 SEE ALSO

File::Tail, perl(1), tee(1)

=head1 AUTHOR

thrig - Jeremy Mates (cpan:JMATES) C<< <jmates at cpan.org> >>

=head1 COPYRIGHT

Copyright (c) 2015 Jeremy Mates

     Permission to use, copy, modify, and/or distribute this software for
     any purpose with or without fee is hereby granted, provided that the
     above copyright notice and this permission notice appear in all
     copies.

     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
     OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
     PERFORMANCE OF THIS SOFTWARE.

=head1 SCRIPT CATEGORIES

Utilities
UNIX/System_administration

=cut
