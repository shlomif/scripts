#!/usr/bin/env perl
#
#   "poor darkedom hear, being would you are?"
#
# Nth order approximation after Shannon of whatever is input as
# characters, where N is set in a particular variable that probably
# should be made an option, or such. The results are generated using
# orders from but not necessarily the given value, as there is fallback
# (and even loop abortion) in the event a tail with nothing that
# followes is found. I suppose one might also add in the odds from
# shorter orders at perhaps a lower weighting to enrich the output
# options, though this mostly needlessly Chaucers the prose.

use 5.14.0;
use warnings;
use Getopt::Long qw(GetOptions);
use Math::Random::Discrete;

GetOptions(
    'columns|c=i' => \my $Flag_Columns,
    'lines|l=i'   => \my $Flag_Lines,
    'order|o=i'   => \my $Flag_Order,
    'help|h|?'    => \&emit_help,
) or exit 65;

$Flag_Columns = 23 if !defined $Flag_Columns or $Flag_Columns < 1;
$Flag_Lines   = 78 if !defined $Flag_Lines   or $Flag_Lines < 1;
$Flag_Order   = 3  if !defined $Flag_Order   or $Flag_Order < 1;

my ( %freq, %odds );

shift @ARGV if @ARGV == 1 and $ARGV[0] eq '-';

while (readline) {
    s/\R//g;
    m/(.{1,$Flag_Order})(.)(?{ $freq{$1}->{$2}++ })^/;
}

my @start = keys %freq;

for ( 1 .. $Flag_Lines ) {
    my $prose = $start[ rand @start ];
  TOKEN: while ( length $prose < $Flag_Columns ) {
        my $token = '';
        my $len   = -$Flag_Order;
        while ( !exists $freq{$token} ) {
            $token = substr $prose, $len++;
            last TOKEN if $len >= 0;
        }
        if ( !exists $odds{$token} ) {
            my @keys   = keys %{ $freq{$token} };
            my @values = values %{ $freq{$token} };
            # "enrich" output with lower-order tokens (at lower-order
            # weights on the odds) -- hmm, really need to adjust the weights
            # so that they are no more than X% of the higher-order total, as
            # they really can screw with the results, even at what I think
            # are low odds...
            #     for my $len (1..length($token)-1) {
            #       my $lot = substr $token, -$len;
            #       push @keys, keys %{ $freq{$lot} };
            #       push @values, map { $_/200**(length($token)-length($lot)) } values %{ $freq{$lot} };
            #     }
            $odds{$token} = Math::Random::Discrete->new( \@values, \@keys );
        }
        my $choice = $odds{$token}->rand;
        $prose .= $choice;
    }
    say $prose;
}

sub emit_help {
    warn <<"END_USAGE";
Usage: nthorderappx [options] files|-

Nth order approximation after Shannon of whatever is input.

END_USAGE
    exit 64;
}
