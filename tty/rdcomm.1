.Dd January 28 2018
.Dt RDCOMM 1
.nh
.Os
.Sh NAME
.Nm rdcomm
.Nd read data from a serial device
.Sh SYNOPSIS
.Bk -words
.Nm
.Op Fl B Ar baud
.Op Fl e Ar expr
.Op Fl I Ar bits
.Op Fl M Ar minread
.Op Fl P Ar parity
.Op Fl bCrSX
.Op Ar devname
.Ek
.Sh DESCRIPTION
.Nm
reads data from a serial device, and prints that data to standard out,
or instead passes it to a supplied TCL expression. On Mac OS X or
OpenBSD the
.Ar devname
will be guessed at if not supplied.
Options:
.Bl -tag -width -indent
.It Fl b
Calls
.Xr tcsendbreak 3
at the beginning of the connection, then sleeps a second.
.It Fl B Ar baud
Baud to use, 9600 by default.
.It Fl C
If set, carriage returns are not stripped. By default they are.
.It Fl e Ar tcl-code
Expression the read data will be passed to in the
.Dv $_
variable. The data will not be printed; the TCL code must handle that,
if necessary. Note that the data will be whatever
.Xr read 2
returns, which may be only a fragment of the expected data.
.It Fl I Ar bits
Number of transmission bits, 5 through 8. 8 bits by default.
.It Fl M Ar minread
Minimum amount of data to read, by default 1 byte. May not exceed the
.Dv SERIAL_BUF_LEN
value set in the code.
.It Fl P Ar parity
Whether and how to perform parity checks, by default or on 0 no parity, 1
for odd parity, and 2 for even parity. If parity checks are enabled, these
will be marked.
.It Fl r
Raw mode, do not replace special ASCII characters with a dot. A rogue serial
device may be able to send XTerm Control Sequences, which depending on the
terminal may allow attacks ranging from nuisance to arbitrary code execution.
.It Fl S
Configure for two stop bits instead of the default one.
.It Fl X
Set 
.Dv TIOCEXCL
on the device: no subsequent
.Xr open 2
operations will be permitted.
.El
.Sh FILES
If the
.Fl e
option is used, TCL will attempt to parse 
.Pa ~/.tclshrc ,
though may not fail if that file does not exist or contains invalid code.
.Sh EXIT STATUS
.Nm
exits with a code >0 if an error occurs though otherwise should loop forever.
.Sh EXAMPLES
These concern the task of supplying appropriate TCL code to the
.Fl e
option. The
.Fl r
raw option is necessary if the exact bytes are required, as without this
option special ASCII characters will be replaced with a dot. The carriage
return is by default ignored, unless the
.Fl C
option is set.
.Pp
A naive read of lines of temperature data over a serial line illustrates
the need to be cautious with what has been read:
.Pp
.Dl Ic $ rdcomm -e 'puts [string trim $_]' /dev/tty.usbmodem621
.Dl 2
.Dl 6.80
.Dl 25.
.Dl ^C
.Pp
With a minimum read of 6 bytes, the (assumed) fixed-width data is more likely to align with the
.Xr read 2
calls though could still be botched, depending exactly on when the reads being:
.Pp
.Dl Ic $ rdcomm -M 6 -e 'puts [string trim $_]' /dev/tty.usbmodem621
.Dl 26.80
.Dl 25.98
.Dl ^C
.Pp
Character-wise processing will require splitting the input:
.Pp
.Dl Ic $ rdcomm -Cre 'foreach c [split $_ \*q\*q] { puts \*q$c [scan $c %c]\*q }'
.Pp
Do note that standard output is line- or block-buffered by default;
should the TCL not emit any newlines and immediate display of the data
be necessary then either a
.Cm flush stdout
command will need to be made:
.Pp
.Dl ... Ic { puts -nonewline \*q[scan $c %c] \*q; flush stdout }'
.Pp
Given the length of the above command it probably makes more sense to
write an appropriate procedure in
.Pa ~/.tclshrc
using the
.Dv rdcomm
variable to restrict that code to only run under processes that set
that variable, such as
.Nm .
.Pp
.Bd -literal -offset indent
if {[info exists rdcomm]} {
    fconfigure stdout -buffering none
    set rdcount 0
    proc hexview {} {
        global _ rdcount
        binary scan $_ H* hex
        foreach hw [regexp -all -inline .. $hex] {
            puts -nonewline "$hw "
            incr rdcount
            if {$rdcount >= 16} {
                puts {}
                set rdcount 0
            }
        }
    }
}
.Ed
.Pp
then call that:
.Pp
.Dl $ Ic rdcomm -Cre hexview
.Sh SEE ALSO
.Xr cu 1 ,
.Xr minicom 1 ,
.Xr Tcl n ,
.Xr termios 4
.Pp
Note that
.Xr cu 1
is maintained on OpenBSD but less so on other flavors of unix.
.Sh AUTHOR
.An Jeremy Mates
