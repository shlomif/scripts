.Dd January  6 2017
.Dt RDCOMM 1
.nh
.Os
.Sh NAME
.Nm rdcomm
.Nd read data from a serial device
.Sh SYNOPSIS
.Nm
.Bk -words
.Op Fl B Ar baud
.Op Fl e Ar expr
.Op Fl I Ar bits
.Op Fl M Ar minread
.Op Fl P Ar parity
.Op Fl CrS
.Op Ar devname
.Ek
.Sh DESCRIPTION
.Nm
reads data from a serial device, and prints that data to standard out, or
instead passes it to a supplied TCL expression. On Mac OS X or OpenBSD, the
.Ar devname
will be guessed at if not supplied, either
.Pa /dev/tty.usbmodem*
or
.Pa /dev/cuaU0 .
.Pp
Options:
.Bl -tag -width -indent
.It Fl B Ar baud
Baud to use, 9600 by default.
.It Fl C
If set, carriage returns are not stripped. By default they are.
.It Fl e Ar expr
TCL expression the read data will be passed to via the
.Dv $_
variable. The data will not be printed; the TCL code must handle that,
if necessary. Note that the data will be whatever
.Xr read 2
returns, which may be only a fragment of the expected data.
.It Fl I Ar bits
Number of transmission bits, 5 through 8. 8 bits by default.
.It Fl M Ar minread
Minimum amount of data to read, by default 1 byte. May not exceed the
.Dv SERIAL_BUF_LEN
value set in the code.
.It Fl P Ar parity
Whether and how to perform parity checks, by default or on 0 no parity, 1
for odd parity, and 2 for even parity. If parity checks are enabled, these
will be marked.
.It Fl r
Raw mode, do not replace special ASCII characters with a dot. A rogue serial
device may be able to send XTerm Control Sequences, which depending on the
terminal may allow attacks ranging from nuisance to arbitrary code execution.
.It Fl S
Configure for two stop bits instead of the default one.
.El
.Pp
.Sh EXIT STATUS
.Nm
will loop forever, though will exit with a non-zero code should something go
awry or if the process or serial line is killed or interrupted.
.Sh EXAMPLES
These concern the task of supplying appropriate TCL code to the
.Fl e
option. The
.Fl r
raw option is necessary if the exact bytes are required, as without this
option special ASCII characters will be replaced with a dot. The carriage
return is by default ignored, unless the
.Fl C
option is set.
.Pp
A naive read of lines of temperature data over a serial line well illustrates
the need to be cautious with what has been read:
.Pp
.Dl Ic $ rdcomm -e 'puts [string trim $_]' /dev/tty.usbmodem621
.Dl 2
.Dl 6.80
.Dl 25.
.Dl ^C
.Pp
With a minimum read of 6 bytes, the (assumed) fixed-width data is more likely to align with the
.Xr read 2
calls though could still be botched, depending exactly on when the reads being:
.Pp
.Dl Ic $ rdcomm -M 6 -e 'puts [string trim $_]' /dev/tty.usbmodem621
.Dl 26.80
.Dl 25.98
.Dl ^C
.Pp
Character-wise processing will require splitting the input:
.Pp
.Dl Ic $ rdcomm -Cre 'foreach c [split $_ \*q\*q] { puts \*q$c [scan $c %c]\*q }'
.Sh FILES
If the
.Fl e
option is used, TCL will attempt to parse 
.Pa $HOME/.tclshrc ,
though will not fail if that file does not exist or contains invalid code.
.Sh SEE ALSO
.Xr cu 1 ,
.Xr minicom 1 ,
.Xr screen 1 ,
.Xr Tcl n
.Pp
Note that
.Xr cu 1
is maintained on OpenBSD but less so on other flavors of unix.
.Sh AUTHOR
.An Jeremy Mates
