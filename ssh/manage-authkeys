#!/usr/bin/env perl
#
# Command interface to OpenSSH authorized_keys file. Run perldoc(1) on
# this file for additional documentation.

use strict;
use warnings;

# clean up env for taint mode ("perldoc perlsec" for more information)
sub BEGIN {
  delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};
  $ENV{PATH} = '/bin:/usr/bin:/usr/local/bin';
}

# TODO may need to use Digest::MD5 + OpenSSL "short hash" format to return
# easier to use "names" for keys. Or, could number the keys, then let
# folks alter them by index...

use Config::OpenSSH::Authkey ();
use File::AtomicWrite        ();
use Getopt::Std qw(getopts);
use Sys::Syslog;

# path to authorized_keys file.  OpenSSH >= 3.0 should merge old
# authorized_keys2 files into authorized_keys.
my $auth_key_file = "~/.ssh/authorized_keys";
my $FILENAME_RE   = qr([A-Za-z0-9._~/-]{1,1024});

# registered commands
my %command = (
  'list'   => \&do_list,
  'dump'   => \&do_dump,
  'write'  => \&do_write,
  'add'    => \&do_add,
  'delete' => \&do_delete,
  'edit'   => \&do_edit
);

######################################################################
#
# Main

my %opts;
getopts( 'h?f:l:aiq', \%opts );
if ( exists $opts{'h'} or exists $opts{'?'} ) {
  print_help();
  exit 64;
}

$auth_key_file = $opts{'f'} if exists $opts{'f'};

if ( $auth_key_file =~ m/^($FILENAME_RE)$/ ) {
  $auth_key_file = $1;
} else {
  die "error: filename fails untaint check: name=$auth_key_file\n";
}

# do ~ expansion on filename
$auth_key_file =~ s{ ^ ~ ( [^/]* ) }
                    { $1 ? (getpwnam($1))[7]
                          : ( $ENV{HOME} || $ENV{LOGDIR}
                              || (getpwuid($>))[7]
                              )
                          }ex;

my $ak = Config::OpenSSH::Authkey->new( { tag_dups => 1 } );
$ak->file($auth_key_file)->consume;

if ( exists $opts{'a'} ) {
  # TODO tr/TODO/\t/ the CLI for the split, below
} else {
  @ARGV = ();
}

# read commands from STDIN if specified
if ( exists $opts{'i'} ) {
  my @tmp;
  chomp( @tmp = readline *STDIN );
  push @ARGV, @tmp;
}

unless (@ARGV) {
  print_help();
  exit 64;
}

# look for commands and deal with them
for (@ARGV) {
  next if m/^#/ or m/^\s*$/;

  my @work = split /\t/;
  my $cmd  = shift @work;

  unless ( exists $command{$cmd} ) {
    remark( 'notice', "skipping unknown command: $cmd" );
    next;
  }

  $command{$cmd}->( $ak, @work );
}

exit 0;

######################################################################
#
# Subroutines

# Functions to show just the keys, or all data (comments and blank lines
# are permitted).
sub do_list {
  my $ak = shift;
  for my $entry ( @{ $ak->get_stored_keys } ) {
    next unless $entry->can('key');
    print $entry->as_string, "\n";
  }
  return 1;
}

sub do_dump {
  my $ak = shift;
  for my $entry ( @{ $ak->get_stored_keys } ) {
    print $entry->as_string, "\n";
  }
  return 1;
}

sub do_write {
  my $ak = shift;

  remark( 'notice',
        'writing keys: count='
      . scalar( @{ $ak->get_stored_keys } )
      . ", file=$auth_key_file" );

  eval {
    my $aw = File::AtomicWrite->new( { file => $auth_key_file } );
    $SIG{TERM} = sub { undef $aw };
    $SIG{INT}  = sub { undef $aw };

    my $tmp_fh = $aw->fh;
    for my $entry ( @{ $ak->get_stored_keys } ) {
      print $tmp_fh $entry->as_string, "\n";
    }
    $aw->commit;
  };
  if ($@) {
    remark( 'error',
      'could not write file: errstr=' . $@ . ", file=$auth_key_file" );
  }
}

sub do_delete {
  die 'TODO';
}

# adds specified key(s) into memory (replaces preexistent keys by hash)
sub do_add {
  die 'TODO';
}

# alters specified key(s) in memory (comments or options ONLY!)
sub do_edit {
  # need means to specify options, comment; need means to specify what
  # key(s) to operate on (by index, by regex, etc.)
  die 'TODO';
}

# generic log handler
sub remark {
  my ( $facility, $priority, $message );
  $facility = 'user';

  if ( @_ > 1 ) {
    $priority = shift;
    $message  = "@_";
  } else {
    $priority = 'info';
    $message  = "@_";
  }

  return 1 if exists $opts{q} and $priority eq 'info';

  if ( exists $opts{l} ) {
    if ( $opts{l} eq "syslog" ) {
      openlog( $0, 'cons', $facility );
      syslog( $priority, $message );
      closelog();

    } elsif ( $opts{l} eq "logger" ) {
      system "logger", '-p', $facility . '.' . $priority, '-t', $0, $message;

    } else {
      die "alert: unknown log handler: ", $opts{l};
    }

  } else {
    warn $priority, ": ", $message, "\n";
  }

  return 1;
}

# a generic help blarb
sub print_help {
  warn <<"HELP";
Usage: $0 [opts]

Command interface to OpenSSH authorized_keys file.

Options:
  -h/-?  Display this message

  -f ff  Use specified authorized_keys file instead of default.

  -a     Allow commands on the command line.
  -i     Allow commands on STDIN.

  -l xx  Log to target xx (default: STDERR, also logger, syslog).
  -q     Hide informational messages.

Run perldoc(1) on this script for additional documentation.

HELP
  return 1;
}

__END__

=head1 NAME

manage-authkeys - command interface to OpenSSH authorized_keys file

=head1 SYNOPSIS

Get a listing of keys in the default authorized_keys file:

  $ manage-authkeys -a list

=head1 DESCRIPTION

=head2 Overview

Provides a scriptable means of listing, altering, and deleting keys
out of an OpenSSH C<~/.ssh/authorized_keys> file.

This script is intended to be talked to by other scripts which present
a better interface to humans.  This script is a first draft prototype,
and may need a rewrite to support additional functionality (like
support for management of authorized keys for other ssh products).

=head2 Normal Usage

  $ manage-authkeys [options] [commands]

See L<"COMMANDS"> for details on the command syntax.

See L<"OPTIONS"> for details on the command line switches supported.

=head1 COMMANDS

Commands allow scriptable interaction with the authorized_keys file. 
Multiple commands may be supplied on either the command line or on
STDIN.  Arguments to commands are separated by the tab character.

=over 4

=item B<list> I<keymatch statement> [I<keymatch statement> ...]

Shows what temporary keyfiles are available, plus some general data
about the public key in question.  Will list all available keys if no
additional arguments are supplied.

The syntax of keymatch statements is either C<all> to match all keys,
or a colon-separated element consisting of the internal hash key and
an exact value to match, e.g. C<type:rsa> or C<hash:a5e6d976>.

=item B<dump> I<keymatch statement> [I<keymatch statement> ...]

Lists keys as exist in memory.

=item B<delete> I<keymatch statement> [I<keymatch statement> ...]

Deletes the specified keys from memory.  Delete requires a keymatch
statement to do anything.

=item B<add> I<keys>

Adds the specified key(s) into memory.  The literal key must not
contain tab characters.

=item B<alter> I<keymatch statement> [comment:foo] [options:bar]

Will alter the comment or options fields of the specified key(s).
Leave the argument to comment or options blank to clear the item in
question.  This allows key options and comments to be updated without
doing an awkward delete/add command cycle.

=item B<write>

Overwrites the authorized_keys file with the keys in memory (or
empties the file should none be in memory).

=back

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=item B<-f> I<auth_key_file>

Use the specified authorized_keys file instead of the default. 
Default is ~/.ssh/authorized_keys, unless changed in the script.

=item B<-L>

Do not lock the C<authorized_keys> file.  By default, the file will be
locked using flock.

=item B<-a>

Allow commands on the command line.

=item B<-i>

Allow commands on STDIN.  If nothing is found on STDIN, the script
will stall, waiting for input.

One (or both) of B<-a> or B<-i> must be specified for the script to do
anything.

=item B<-l> I<target>

Log to I<target>.  Default is to log to STDERR, other options are
C<syslog> (via L<Sys::Syslog|Sys::Syslog>) or C<logger> (system
logger(1) utility).

=item B<-q>

Quiet mode: do not emit informational messages.

=back

=head1 EXAMPLES

List only SSH1 keys with a BSD-compatible echo(1):

  $ echo -e "list\ttype:rsa1" | manage-authkeys -i

Delete all keys:

  $ (echo -e "delete\tall"; echo write) | manage-authkeys -i

=head1 ENVIRONMENT

Developed for OpenSSH (as of version 3.4); should work on any system
with perl 5 and the required modules (e.g.
L<Digest::MD5|Digest::MD5>).  Will most likely not work with other SSH
server software.

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://github.com/thrig/sial.org-scripts/tree/master

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

Commands expecting arguments use tabs to separate the parameters. 
Tabs are difficult to input on the command line, so STDIN is advised
for commands that require arguments.

Comments or blank lines in the authorized_keys file will be deleted
following an extract-write cycle.

The key parsing routine is loose, and will be messed up by options
containing what look like the keys inside a C<command=""> or similar
option.  Additionally, option parsing will be messed up if there are
commas inside the same style of quoted blocks.

=head1 TODO

Some sort of ACL/preferences file to limit what commands a remote
agent has available to it?

Better error handling?  Get user-side script written, so can figure
out error handling across a SSH channel.

Option to optionally log what keys were altered or not (as key list
could potentially be long)?

=head1 SEE ALSO

perl(1), ssh-keygen(1)

=head1 AUTHOR

thrig - Jeremy Mates (cpan:JMATES) C<< <jmates at cpan.org> >>

=head1 COPYRIGHT

Copyright (c) 2015 Jeremy Mates

     Permission to use, copy, modify, and/or distribute this software for
     any purpose with or without fee is hereby granted, provided that the
     above copyright notice and this permission notice appear in all
     copies.

     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
     OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
     PERFORMANCE OF THIS SOFTWARE.

=cut
