#!/usr/bin/env perl
#
# Audits notes of a particular MIDI patch, presumably to select ones to
# be used by something else. A practical use might be to screen a drum
# set for desired sounds to use.
#
#   patchaudit > these_are_ok

use v5.14;
use Carp qw(croak);
use Getopt::Long qw(GetOptions);
use Scalar::Util qw(looks_like_number);
use Term::ReadKey;
use Time::HiRes qw(usleep);

# TODO untested on a big endian system
my $NOTE_OFF       = 8 << 4;
my $NOTE_ON        = 9 << 4;
my $CONTROL_CHANGE = 11 << 4;
my $PROGRAM_CHANGE = 12 << 4;

my $ALL_SOUNDS_OFF = 120;
my $ALL_NOTES_OFF  = 123;

GetOptions(
    'channel|c=i' => \my $Flag_Channel,
    'help|h|?'    => sub {
        warn "Usage: patchaudit [-c channel] [--notemin=x] [--notemax=y] [-v velocity]\n";
        exit 64;
    },
    'notemin=i'           => \my $Flag_Min,
    'notemax=i'           => \my $Flag_Max,
    'velocity|volume|v=i' => \my $Flag_Velocity,
) or exit 64;

my $midi_dev = shift // '/dev/rmidi0';
my $tty_dev = '/dev/tty';

open my $midfh, '>', $midi_dev
  or die "could not open MIDI device '$midi_dev': $!\n";
binmode $midfh;
$midfh->autoflush(1);

open my $ttyfh, '>', $tty_dev or die "could not open TTY: $!\n";

$Flag_Channel //= 0;

undef $Flag_Min if $Flag_Min < 0;
undef $Flag_Max if $Flag_Max > 127;
$Flag_Min //= 0;
$Flag_Max //= 127;
if ( $Flag_Min > $Flag_Max ) {
    ( $Flag_Min, $Flag_Max ) = ( $Flag_Max, $Flag_Min );
}

$Flag_Velocity = midi_value( $Flag_Velocity, 100 );

for my $s (qw/ALRM HUP INT PIPE QUIT TERM USR1 USR2/) {
    $SIG{$s} = \&cleanup;
}

for my $note ( $Flag_Min .. $Flag_Max ) {
    play( $note, 250 ) for 1 .. 4;
    play($note);
    print $note if is_okay("ok? ($note) ");
}

sub play {
    my ( $note, $ms ) = @_;
    printf $midfh "%c%c%c", $NOTE_ON | $Flag_Channel, $note, $Flag_Velocity;
    if ( defined $ms and $ms > 0 ) {
        usleep( $ms * 1000 );
        printf $midfh "%c%c%c", $NOTE_OFF | $Flag_Channel, $note, $Flag_Velocity;
    }
}

sub cleanup {
    silence();
    exit 1;
}

sub is_okay {
    my $msg = shift;
    my $ret = 0;
    print $ttyfh "\n$msg" if defined $msg;
    ReadMode 3;
    my $answer;
    while ( not defined( $answer = ReadKey(-1) ) ) {
        # no key yet
    }
    if ( $answer =~ m/[yYjJ]/ ) {
        $ret = 1;
    }
    ReadMode 0;
    return $ret;
}

sub midi_value {
    my ( $v, $default ) = @_;
    $v = $default if !defined $v;
    croak "not a number: $v\n" if !looks_like_number $v;
    if    ( $v < 0 )   { $v = 0 }
    elsif ( $v > 127 ) { $v = 127 }
    return int $v;
}

sub silence {
    printf $midfh "%c%c%c", $CONTROL_CHANGE | $Flag_Channel, $ALL_NOTES_OFF,  0;
    printf $midfh "%c%c%c", $CONTROL_CHANGE | $Flag_Channel, $ALL_SOUNDS_OFF, 0;
}
