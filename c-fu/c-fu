#!/usr/bin/env perl
#
# Compile and run random C snippets specified on command line:
#
# c-fu 'puts("Hello World")'
#
# Each argument (or line of standard input if the only argument is '-')
# is treated as a C statement (and a semi-colon appended if not
# present).
#
# Various compiler options are set to various defaults, or can be
# customized via the CC or CFLAGS environment variables. If in doubt,
# read the source.
#
# The directory used to hold temporary sources and the executable can be
# set by altering the TMPDIR environment variable:
#
#   env TMPDIR=$HOME/tmp c-fu ...
#
# in the event /tmp is mounted 'noexec' as is only right and proper to do.

use strict;
use warnings;

use File::Basename qw/basename/;
use File::Spec ();
use File::Temp qw/tempfile/;
use Getopt::Long qw/GetOptions/;
use IO::Handle;

my $BASENAME = basename($0);
my $CC = exists $ENV{'CC'} ? $ENV{'CC'} : 'cc';
my @CFLAGS = split ' ', exists $ENV{'CFLAGS'} ? $ENV{'CFLAGS'} : '-O2 -Wall';

my $echo_code   = 0;
my $dry_run     = 0;
my $exit_status = 0;

my ( $code_fh, $code_fname, $bin_fname );
my ( @defines );

my $main_args = 'int argc, const char *argv[]';

########################################################################
#
# MAIN

unless (@ARGV) {
  warn "Usage: $BASENAME [c-statement-1 c-stmt-2 ..|-]\n";
  exit 64;
}

GetOptions(
  'show-code|l' => \$echo_code,
  'dry-run|n'   => \$dry_run,
  'defines|d=s' => \@defines
);

for my $define (@defines) {
  $define .= "\n" unless $define =~ m/\n$/;
}

if ( !grep { $_ eq '-x' } @CFLAGS ) {
  push @CFLAGS, qw/-x c/;
}

if ( @ARGV == 1 and $ARGV[0] eq '-' ) {
  chomp( @ARGV = readline *STDIN );
}

for my $statement (@ARGV) {
  $statement .= ";\n" unless $statement =~ m/;\s*$/;
}

if ("@ARGV" !~ m/arg[cv]/) {
  $main_args = 'void';
}

# PID is in filename as otherwise src and obj would only be related by
# perhaps the filesystem mtime
( $code_fh, $code_fname ) = tempfile(
  "$BASENAME.src-$$.XXXXXXXXXX",
  DIR    => File::Spec->tmpdir,
  UNLINK => 0
);
( undef, $bin_fname ) = tempfile(
  "$BASENAME.obj-$$.XXXXXXXXXX",
  DIR    => File::Spec->tmpdir,
  UNLINK => 0
);

# Used mostly on Unix or BSD (Mac OS X, OpenBSD), less so on Linux.
my $c_template = <<"END_TMPL";

#ifdef __linux__
#define _BSD_SOURCE
#define _GNU_SOURCE
#include <linux/limits.h>
#include <getopt.h>
#else
#include <sys/syslimits.h>
#endif

#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/ip6.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <arpa/inet.h>

#include <sys/time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/stat.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <float.h>
#include <fts.h>
#include <grp.h>
#include <libgen.h>
#include <limits.h>
#include <math.h>
#include <pwd.h>
#include <signal.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sysexits.h>
#include <time.h>
#include <unistd.h>

@defines
int main($main_args) {
@ARGV
  return 0;
}
END_TMPL

$code_fh->autoflush(1);
print $code_fh $c_template;
print $c_template if $echo_code;

if ( !$dry_run ) {
  my $s = system( $CC, @CFLAGS, $code_fname, '-o', $bin_fname );
  if ( $s != 0 ) {
    print $c_template;
    die "error: compile failed: $?\n";
  }
  system($bin_fname);
  $exit_status = $? >> 8;
}

unlink $code_fname, $bin_fname;

exit $exit_status;
